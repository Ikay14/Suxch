{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8080/api/v1';\nexport const login = async (email, password) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Login failed');\n    }\n    const data = await response.json();\n\n    // Optionally store token in localStorage or cookie\n    localStorage.setItem('token', data.token);\n    return 'Login successful';\n  } catch (error) {\n    throw new Error();\n  }\n};\nexport const logout = async () => {\n  // If logout is handled server-side\n  // await fetch(`${API_BASE_URL}/auth/logout`, { method: 'POST' });\n\n  // Clear stored token on client\n  localStorage.removeItem('token');\n  return 'Logout successful';\n};\nexport const register = async (email, password) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Registration failed');\n    }\n    const data = await response.json();\n    return 'Registration successful';\n  } catch (error) {\n    throw new Error(error.message || 'An unexpected error occurred');\n  }\n};","map":{"version":3,"names":["API_BASE_URL","login","email","password","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","data","localStorage","setItem","token","error","logout","removeItem","register"],"sources":["C:/Users/DELL/Documents/projects/suxch/chat-client/src/services/auth.ts"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8080/api/v1'; \n\nexport const login = async (email: string, password: string): Promise<string> => {\n    try {\n        const response = await fetch(`${API_BASE_URL}/auth/login`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ email, password }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.message || 'Login failed');\n        }\n\n        const data = await response.json();\n\n        // Optionally store token in localStorage or cookie\n        localStorage.setItem('token', data.token);\n\n        return 'Login successful';\n    } catch (error) {\n        throw new Error( );\n    }\n};\n\nexport const logout = async (): Promise<string> => {\n    // If logout is handled server-side\n    // await fetch(`${API_BASE_URL}/auth/logout`, { method: 'POST' });\n\n    // Clear stored token on client\n    localStorage.removeItem('token');\n\n    return 'Logout successful';\n};\n\nexport const register = async (email: string, password: string): Promise<string> => {\n    try {\n        const response = await fetch(`${API_BASE_URL}/auth/register`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ email, password }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.message || 'Registration failed');\n        }\n\n        const data = await response.json();\n\n        return 'Registration successful';\n    } catch (error) {\n        throw new Error((error as any).message || 'An unexpected error occurred');\n    }\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,8BAA8B;AAEnD,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAsB;EAC7E,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,aAAa,EAAE;MACvDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC;IAC5C,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,cAAc,CAAC;IACxD;IAEA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACS,IAAI,CAAC,CAAC;;IAElC;IACAI,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,IAAI,CAACG,KAAK,CAAC;IAEzC,OAAO,kBAAkB;EAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,MAAM,IAAIN,KAAK,CAAE,CAAC;EACtB;AACJ,CAAC;AAED,OAAO,MAAMO,MAAM,GAAG,MAAAA,CAAA,KAA6B;EAC/C;EACA;;EAEA;EACAJ,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;EAEhC,OAAO,mBAAmB;AAC9B,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOrB,KAAa,EAAEC,QAAgB,KAAsB;EAChF,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,gBAAgB,EAAE;MAC1DM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC;IAC5C,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,qBAAqB,CAAC;IAC/D;IAEA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACS,IAAI,CAAC,CAAC;IAElC,OAAO,yBAAyB;EACpC,CAAC,CAAC,OAAOO,KAAK,EAAE;IACZ,MAAM,IAAIN,KAAK,CAAEM,KAAK,CAASL,OAAO,IAAI,8BAA8B,CAAC;EAC7E;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}