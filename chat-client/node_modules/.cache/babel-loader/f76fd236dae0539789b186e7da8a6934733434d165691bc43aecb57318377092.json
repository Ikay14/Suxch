{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Documents\\\\projects\\\\suxch\\\\chat-client\\\\src\\\\components\\\\Chat\\\\ChatWindow.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { socketService } from '../../services/socket';\nimport './ChatWindow.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatWindow = () => {\n  _s();\n  const {\n    userId\n  } = useParams();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    receiverId,\n    senderId\n  } = useParams();\n  useEffect(() => {\n    const initializeSocket = async () => {\n      const token = localStorage.getItem('token');\n      if (token && senderId) {\n        try {\n          console.log('Initializing WebSocket with token and senderId:', token, senderId);\n          await socketService.initializeSocket(token, senderId);\n          console.log('WebSocket initialized successfully');\n        } catch (error) {\n          console.error('Error initializing WebSocket:', error);\n        }\n      } else {\n        console.error('Token or senderId is missing');\n      }\n    };\n    initializeSocket();\n    return () => {\n      console.log('Cleaning up WebSocket connection...');\n      const socket = socketService.getSocket();\n      if (socket) {\n        socket.off('message');\n      }\n      socketService.disconnect();\n    };\n  }, []);\n  useEffect(() => {\n    const socket = socketService.getSocket();\n    if (!socket || !socket.connected) {\n      const token = localStorage.getItem('token');\n      if (token && senderId && receiverId) {\n        console.log('Initializing WebSocket with token and senderId:', token, senderId);\n        socketService.initializeSocket(token, senderId);\n      }\n    }\n    return () => {\n      socketService.disconnect();\n    };\n  }, [senderId, receiverId]);\n\n  // useEffect(() => {\n  //   // Listen for incoming messages\n  //   socketService.getSocket()?.on('message', (message: any) => {\n  //     setMessages((prevMessages) => [\n  //       ...prevMessages,\n  //       {\n  //         content: message.content,\n  //         // Assuming message.sender is an object with a fullName property\n  //         fullName: message.sender?.fullName || 'Unknown',\n  //         createdAt: new Date().toISOString(),\n  //       },\n  //     ]);\n  //   });\n\n  //   return () => {\n  //     // Clean up WebSocket connection on component unmount\n  //     socketService.disconnect();\n  //   };\n  // }, [userId]);\n\n  useEffect(() => {\n    const socket = socketService.getSocket();\n    if (socket) {\n      socket.on('new_message', message => {\n        console.log('New message received:', message);\n        setMessages(prevMessages => [...prevMessages, {\n          content: message.content,\n          fullName: message.sender.fullName || 'Unknown',\n          createdAt: new Date().toISOString()\n        }]);\n      });\n    }\n    return () => {\n      if (socket) {\n        socket.off('new_message');\n      }\n    };\n  }, []);\n  const sendMessage = e => {\n    e.preventDefault();\n    if (!newMessage.trim()) {\n      console.error('Message content is empty');\n      return;\n    }\n    if (!receiverId || !senderId) {\n      return;\n    }\n    const payload = {\n      receiverId,\n      senderId,\n      content: newMessage\n    };\n    const socket = socketService.getSocket();\n    if (!socket || !socket.connected) {\n      console.error('WebSocket is not connected');\n      return;\n    }\n    socket.emit('send_message', payload, response => {\n      if (response.status === 'success') {\n        setMessages(prevMessages => [...prevMessages, {\n          content: newMessage,\n          fullName: 'You',\n          createdAt: new Date().toISOString()\n        }]);\n      } else {\n        console.error('Failed to send message:', response.message);\n      }\n    });\n    setMessages(prevMessages => [...prevMessages, {\n      content: newMessage,\n      fullName: 'You',\n      createdAt: new Date().toISOString()\n    }]);\n    setNewMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.fullName === 'You' ? 'sent' : 'received'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: message.fullName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this), \": \", message.content]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"timestamp\",\n          children: new Date(message.createdAt).toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      className: \"send-message-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"Type a message...\",\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isLoading,\n        className: \"send-button\",\n        children: isLoading ? 'Sending...' : 'Send'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatWindow, \"0heI3HKuctyNk+YEYnJE+TPFlgk=\", false, function () {\n  return [useParams, useParams];\n});\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","useParams","socketService","jsxDEV","_jsxDEV","ChatWindow","_s","userId","messages","setMessages","newMessage","setNewMessage","isLoading","setIsLoading","receiverId","senderId","initializeSocket","token","localStorage","getItem","console","log","error","socket","getSocket","off","disconnect","connected","on","message","prevMessages","content","fullName","sender","createdAt","Date","toISOString","sendMessage","e","preventDefault","trim","payload","emit","response","status","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleTimeString","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Documents/projects/suxch/chat-client/src/components/Chat/ChatWindow.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { socketService } from '../../services/socket';  \nimport './ChatWindow.css';\nimport MessageList from './MessageList';\n\nconst ChatWindow: React.FC = () => {\n  const { userId } = useParams<{ userId: string }>();\n  interface Message {\n    content: string;\n    fullName: string;\n    createdAt: string;\n  }\n  \n  const [messages, setMessages] = useState<Message[]>([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { receiverId, senderId } = useParams<{ receiverId: string; senderId: string }>();\n\n  useEffect(() => {\n    const initializeSocket = async () => {\n      const token = localStorage.getItem('token');\n      if (token && senderId) {\n        try {\n          console.log('Initializing WebSocket with token and senderId:', token, senderId);\n          await socketService.initializeSocket(token, senderId);\n          console.log('WebSocket initialized successfully');\n        } catch (error) {\n          console.error('Error initializing WebSocket:', error);\n        }\n      } else {\n        console.error('Token or senderId is missing');\n      }\n    };\n\n    initializeSocket();\n\n    return () => {\n      console.log('Cleaning up WebSocket connection...');\n      const socket = socketService.getSocket();\n      if (socket) {\n        socket.off('message');\n      }\n      socketService.disconnect();\n    };\n  }, []);\n\n  useEffect(() => {\n    const socket = socketService.getSocket();\n    if (!socket || !socket.connected) {\n      const token = localStorage.getItem('token');\n      if (token && senderId && receiverId) {\n        console.log('Initializing WebSocket with token and senderId:', token, senderId);\n        socketService.initializeSocket(token, senderId);\n      }\n    }\n\n    return () => {\n      socketService.disconnect();\n    };\n  }, [senderId, receiverId]);\n\n  // useEffect(() => {\n  //   // Listen for incoming messages\n  //   socketService.getSocket()?.on('message', (message: any) => {\n  //     setMessages((prevMessages) => [\n  //       ...prevMessages,\n  //       {\n  //         content: message.content,\n  //         // Assuming message.sender is an object with a fullName property\n  //         fullName: message.sender?.fullName || 'Unknown',\n  //         createdAt: new Date().toISOString(),\n  //       },\n  //     ]);\n  //   });\n\n  //   return () => {\n  //     // Clean up WebSocket connection on component unmount\n  //     socketService.disconnect();\n  //   };\n  // }, [userId]);\n\n  useEffect(() => {\n    const socket = socketService.getSocket();\n    if (socket) {\n      socket.on('new_message', (message: any) => {\n        console.log('New message received:', message);\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          {\n            content: message.content,\n            fullName: message.sender.fullName || 'Unknown',\n            createdAt: new Date().toISOString(),\n          },\n        ]);\n      });\n    }\n\n    return () => {\n      if (socket) {\n        socket.off('new_message');\n      }\n    };\n  }, []);\n\n  const sendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!newMessage.trim()) {\n      console.error('Message content is empty');\n      return;\n    }\n\n    if (!receiverId || !senderId) {\n      return;\n    }\n\n    const payload = {\n      receiverId,\n      senderId,\n      content: newMessage,\n    };\n\n\n    const socket = socketService.getSocket();\n    if (!socket || !socket.connected) {\n      console.error('WebSocket is not connected');\n      return;\n    }\n\n    socket.emit('send_message', payload, (response: any) => {\n      if (response.status === 'success') {\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      {\n        content: newMessage,\n        fullName: 'You',\n        createdAt: new Date().toISOString(),\n      },\n    ]);\n      } else {\n        console.error('Failed to send message:', response.message);\n      }\n    });\n\n    \n    setMessages((prevMessages) => [\n      ...prevMessages,\n      {\n        content: newMessage,\n        fullName: 'You',\n        createdAt: new Date().toISOString(),\n      },\n    ]);\n    setNewMessage('');\n  };\n  \n  return (\n    <div className=\"chat-window\">\n      <div className=\"chat-header\">\n        {messages.map((message, index) => (\n          <div key={index} className={`message ${message.fullName === 'You' ? 'sent' : 'received'}`}>\n            <p>\n              <strong>{message.fullName}</strong>: {message.content}\n            </p>\n            <span className=\"timestamp\">{new Date(message.createdAt).toLocaleTimeString()}</span>\n          </div>\n        ))}\n      </div>\n\n      <form onSubmit={sendMessage} className=\"send-message-form\">\n        <input\n          type=\"text\"\n          value={newMessage}\n          onChange={(e) => setNewMessage(e.target.value)}\n          placeholder=\"Type a message...\"\n          disabled={isLoading}\n        />\n        <button type=\"submit\" disabled={isLoading} className=\"send-button\">\n          {isLoading ? 'Sending...' : 'Send'}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ChatWindow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}