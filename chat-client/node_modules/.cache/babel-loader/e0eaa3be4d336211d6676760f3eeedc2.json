{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './ChatWindow.css';\nimport io from 'socket.io-client';\nconst SOCKET_SERVER_URL = 'http://localhost:8080/chat';\nconst ChatWindow = () => {\n  _s();\n  const {\n    userId\n  } = useParams();\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    // Reuse existing socket if available\n    const existingSocket = io.socket;\n    if (existingSocket && existingSocket.connected) {\n      setSocket(existingSocket);\n      return;\n    }\n    const token = localStorage.getItem('token');\n    if (!token) {\n      history.push('/login');\n      return;\n    }\n    const newSocket = io(SOCKET_SERVER_URL, {\n      path: '/chat/socket.io',\n      auth: {\n        token: `Bearer ${token}`\n      },\n      query: {\n        userId\n      },\n      transports: ['websocket']\n    });\n    setSocket(newSocket);\n\n    // Store socket globally for reuse\n    io.socket = newSocket;\n    newSocket.on('connect', () => {\n      console.log('Reconnected to chat namespace');\n      if (receiverId) {\n        newSocket.emit('join_conversation', {\n          userId,\n          receiverId\n        });\n      }\n    });\n    return () => {\n      // Don't disconnect - we want to reuse the connection\n      // Just remove listeners\n      newSocket.off('connect');\n      newSocket.off('new_message');\n    };\n  }, [userId]);\n\n  // ... rest of your component\n};\n_s(ChatWindow, \"LmKF/N989rrROvX+QY4BBo6wjEI=\", false, function () {\n  return [useParams];\n});\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["useState","useEffect","useParams","io","SOCKET_SERVER_URL","ChatWindow","_s","userId","socket","setSocket","existingSocket","connected","token","localStorage","getItem","history","push","newSocket","path","auth","query","transports","on","console","log","receiverId","emit","off","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Documents/projects/suxch/chat-client/src/components/Chat/ChatWindow.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport './ChatWindow.css';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport UploadedFiles from './UploadedFiles';\nimport { FaPaperclip } from 'react-icons/fa';\nimport io, { Socket } from 'socket.io-client';\nimport { stopTyping } from 'src/services/socket';\n\nconst SOCKET_SERVER_URL = 'http://localhost:8080/chat';\n\ninterface ChatParams {\n    userId: string;\n    receiverId?: string; \n}\n\nconst ChatWindow: React.FC = () => {\n  const { userId } = useParams<{ userId: string }>();\n  const [socket, setSocket] = useState<Socket | null>(null);\n\n  useEffect(() => {\n    // Reuse existing socket if available\n    const existingSocket = io.socket;\n    if (existingSocket && existingSocket.connected) {\n      setSocket(existingSocket);\n      return;\n    }\n\n    const token = localStorage.getItem('token');\n    if (!token) {\n      history.push('/login');\n      return;\n    }\n\n    const newSocket = io(SOCKET_SERVER_URL, {\n      path: '/chat/socket.io',\n      auth: { token: `Bearer ${token}` },\n      query: { userId },\n      transports: ['websocket'],\n    });\n\n    setSocket(newSocket);\n\n    // Store socket globally for reuse\n    io.socket = newSocket;\n\n    newSocket.on('connect', () => {\n      console.log('Reconnected to chat namespace');\n      if (receiverId) {\n        newSocket.emit('join_conversation', { userId, receiverId });\n      }\n    });\n\n    return () => {\n      // Don't disconnect - we want to reuse the connection\n      // Just remove listeners\n      newSocket.off('connect');\n      newSocket.off('new_message');\n    };\n  }, [userId]);\n\n  // ... rest of your component\n};\nexport default ChatWindow;"],"mappings":";AAAA,SAAgBA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAoB,kBAAkB;AACxD,OAAO,kBAAkB;AAKzB,OAAOC,EAAE,MAAkB,kBAAkB;AAG7C,MAAMC,iBAAiB,GAAG,4BAA4B;AAOtD,MAAMC,UAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM;IAAEC;EAAO,CAAC,GAAGL,SAAS,CAAqB,CAAC;EAClD,MAAM,CAACM,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAgB,IAAI,CAAC;EAEzDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,cAAc,GAAGP,EAAE,CAACK,MAAM;IAChC,IAAIE,cAAc,IAAIA,cAAc,CAACC,SAAS,EAAE;MAC9CF,SAAS,CAACC,cAAc,CAAC;MACzB;IACF;IAEA,MAAME,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;MACVG,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;MACtB;IACF;IAEA,MAAMC,SAAS,GAAGd,EAAE,CAACC,iBAAiB,EAAE;MACtCc,IAAI,EAAE,iBAAiB;MACvBC,IAAI,EAAE;QAAEP,KAAK,EAAE,UAAUA,KAAK;MAAG,CAAC;MAClCQ,KAAK,EAAE;QAAEb;MAAO,CAAC;MACjBc,UAAU,EAAE,CAAC,WAAW;IAC1B,CAAC,CAAC;IAEFZ,SAAS,CAACQ,SAAS,CAAC;;IAEpB;IACAd,EAAE,CAACK,MAAM,GAAGS,SAAS;IAErBA,SAAS,CAACK,EAAE,CAAC,SAAS,EAAE,MAAM;MAC5BC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC5C,IAAIC,UAAU,EAAE;QACdR,SAAS,CAACS,IAAI,CAAC,mBAAmB,EAAE;UAAEnB,MAAM;UAAEkB;QAAW,CAAC,CAAC;MAC7D;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACX;MACA;MACAR,SAAS,CAACU,GAAG,CAAC,SAAS,CAAC;MACxBV,SAAS,CAACU,GAAG,CAAC,aAAa,CAAC;IAC9B,CAAC;EACH,CAAC,EAAE,CAACpB,MAAM,CAAC,CAAC;;EAEZ;AACF,CAAC;AAACD,EAAA,CA9CID,UAAoB;EAAA,QACLH,SAAS;AAAA;AAAA0B,EAAA,GADxBvB,UAAoB;AA+C1B,eAAeA,UAAU;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}