{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.statusCallbacks = [];\n    // Callbacks for connection status\n    this.handleConnect = () => {\n      console.log('WebSocket connected');\n      this.triggerStatusCallbacks('connected');\n    };\n    this.handleDisconnect = () => {\n      console.log('WebSocket disconnected');\n      this.triggerStatusCallbacks('disconnected');\n    };\n    this.handleError = () => {\n      console.error('WebSocket connection error');\n      this.triggerStatusCallbacks('error');\n    };\n    this.socket = io('your-server-url', {\n      autoConnect: false\n    });\n\n    // Listen for socket connection events\n    this.socket.on('connect', this.handleConnect);\n    this.socket.on('disconnect', this.handleDisconnect);\n    this.socket.on('connect_error', this.handleError);\n  }\n\n  // Connect method with retry mechanism (if needed)\n  connectSocketWithRetry(onConnect) {\n    var _this$socket;\n    (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.connect();\n    this.onConnect(onConnect);\n  }\n  // Register for connection status updates\n  onConnect(callback) {\n    this.statusCallbacks.push(callback);\n  }\n  triggerStatusCallbacks(status) {\n    this.statusCallbacks.forEach(callback => callback(status));\n  }\n\n  // Cleanup disconnect\n  disconnect() {\n    var _this$socket2;\n    if ((_this$socket2 = this.socket) !== null && _this$socket2 !== void 0 && _this$socket2.connected) {\n      console.log('WebSocket manually disconnected');\n      this.socket.disconnect();\n    }\n  }\n}\nexport const socketService = new SocketService();","map":{"version":3,"names":["io","SocketService","constructor","socket","statusCallbacks","handleConnect","console","log","triggerStatusCallbacks","handleDisconnect","handleError","error","autoConnect","on","connectSocketWithRetry","onConnect","_this$socket","connect","callback","push","status","forEach","disconnect","_this$socket2","connected","socketService"],"sources":["C:/Users/DELL/Documents/projects/suxch/chat-client/src/services/socket.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\n\nclass SocketService {\n  socket: Socket | null = null;\n  private statusCallbacks: Function[] = [];\n\n  constructor() {\n    this.socket = io('your-server-url', { autoConnect: false });\n    \n    // Listen for socket connection events\n    this.socket.on('connect', this.handleConnect);\n    this.socket.on('disconnect', this.handleDisconnect);\n    this.socket.on('connect_error', this.handleError);\n  }\n\n  // Connect method with retry mechanism (if needed)\n  connectSocketWithRetry(onConnect: () => void) {\n    this.socket?.connect();\n    this.onConnect(onConnect);\n  }\n\n  // Callbacks for connection status\n  private handleConnect = () => {\n    console.log('WebSocket connected');\n    this.triggerStatusCallbacks('connected');\n  };\n\n  private handleDisconnect = () => {\n    console.log('WebSocket disconnected');\n    this.triggerStatusCallbacks('disconnected');\n  };\n\n  private handleError = () => {\n    console.error('WebSocket connection error');\n    this.triggerStatusCallbacks('error');\n  };\n\n  // Register for connection status updates\n  onConnect(callback: () => void) {\n    this.statusCallbacks.push(callback);\n  }\n\n  triggerStatusCallbacks(status: 'connecting' | 'connected' | 'disconnected' | 'error') {\n    this.statusCallbacks.forEach((callback) => callback(status));\n  }\n\n  // Cleanup disconnect\n  disconnect() {\n    if (this.socket?.connected) {\n      console.log('WebSocket manually disconnected');\n      this.socket.disconnect();\n    }\n  }\n}\n\nexport const socketService = new SocketService();\n"],"mappings":"AAAA,SAASA,EAAE,QAAgB,kBAAkB;AAE7C,MAAMC,aAAa,CAAC;EAIlBC,WAAWA,CAAA,EAAG;IAAA,KAHdC,MAAM,GAAkB,IAAI;IAAA,KACpBC,eAAe,GAAe,EAAE;IAiBxC;IAAA,KACQC,aAAa,GAAG,MAAM;MAC5BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClC,IAAI,CAACC,sBAAsB,CAAC,WAAW,CAAC;IAC1C,CAAC;IAAA,KAEOC,gBAAgB,GAAG,MAAM;MAC/BH,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrC,IAAI,CAACC,sBAAsB,CAAC,cAAc,CAAC;IAC7C,CAAC;IAAA,KAEOE,WAAW,GAAG,MAAM;MAC1BJ,OAAO,CAACK,KAAK,CAAC,4BAA4B,CAAC;MAC3C,IAAI,CAACH,sBAAsB,CAAC,OAAO,CAAC;IACtC,CAAC;IA5BC,IAAI,CAACL,MAAM,GAAGH,EAAE,CAAC,iBAAiB,EAAE;MAAEY,WAAW,EAAE;IAAM,CAAC,CAAC;;IAE3D;IACA,IAAI,CAACT,MAAM,CAACU,EAAE,CAAC,SAAS,EAAE,IAAI,CAACR,aAAa,CAAC;IAC7C,IAAI,CAACF,MAAM,CAACU,EAAE,CAAC,YAAY,EAAE,IAAI,CAACJ,gBAAgB,CAAC;IACnD,IAAI,CAACN,MAAM,CAACU,EAAE,CAAC,eAAe,EAAE,IAAI,CAACH,WAAW,CAAC;EACnD;;EAEA;EACAI,sBAAsBA,CAACC,SAAqB,EAAE;IAAA,IAAAC,YAAA;IAC5C,CAAAA,YAAA,OAAI,CAACb,MAAM,cAAAa,YAAA,uBAAXA,YAAA,CAAaC,OAAO,CAAC,CAAC;IACtB,IAAI,CAACF,SAAS,CAACA,SAAS,CAAC;EAC3B;EAkBA;EACAA,SAASA,CAACG,QAAoB,EAAE;IAC9B,IAAI,CAACd,eAAe,CAACe,IAAI,CAACD,QAAQ,CAAC;EACrC;EAEAV,sBAAsBA,CAACY,MAA6D,EAAE;IACpF,IAAI,CAAChB,eAAe,CAACiB,OAAO,CAAEH,QAAQ,IAAKA,QAAQ,CAACE,MAAM,CAAC,CAAC;EAC9D;;EAEA;EACAE,UAAUA,CAAA,EAAG;IAAA,IAAAC,aAAA;IACX,KAAAA,aAAA,GAAI,IAAI,CAACpB,MAAM,cAAAoB,aAAA,eAAXA,aAAA,CAAaC,SAAS,EAAE;MAC1BlB,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAC9C,IAAI,CAACJ,MAAM,CAACmB,UAAU,CAAC,CAAC;IAC1B;EACF;AACF;AAEA,OAAO,MAAMG,aAAa,GAAG,IAAIxB,aAAa,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}