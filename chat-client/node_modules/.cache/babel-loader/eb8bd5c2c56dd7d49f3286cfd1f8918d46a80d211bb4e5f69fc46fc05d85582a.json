{"ast":null,"code":"var _SocketService;\nimport { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n  }\n  static getInstance() {\n    if (!SocketService.instance) {\n      SocketService.instance = new SocketService();\n    }\n    return SocketService.instance;\n  }\n  initializeSocket(token) {\n    return new Promise((resolve, reject) => {\n      var _this$socket;\n      if ((_this$socket = this.socket) !== null && _this$socket !== void 0 && _this$socket.connected) return resolve(this.socket);\n\n      // Clean up existing connection\n      if (this.socket) {\n        this.socket.disconnect();\n        this.socket = null;\n      }\n      const cleanToken = token.replace('Bearer ', '');\n      const userId = localStorage.getItem('userId');\n      this.socket = io('http://localhost:8080', {\n        path: '/socket.io',\n        auth: {\n          token: cleanToken\n        },\n        transports: ['websocket'],\n        reconnectionAttempts: 3,\n        reconnectionDelay: 1000,\n        query: {\n          userId\n        },\n        extraHeaders: {\n          'Authorization': `Bearer ${cleanToken}`\n        },\n        withCredentials: true\n      });\n      this.socket.on('connect', () => {\n        var _this$socket2;\n        console.log('Client socket connected:', (_this$socket2 = this.socket) === null || _this$socket2 === void 0 ? void 0 : _this$socket2.id);\n        resolve(this.socket);\n      });\n      this.socket.on('connect_error', err => {\n        console.error('Connection error:', err.message);\n        reject(err);\n      });\n    });\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n}\n_SocketService = SocketService;\nSocketService.instance = void 0;\nexport const socketService = SocketService.getInstance();","map":{"version":3,"names":["io","SocketService","constructor","socket","getInstance","instance","initializeSocket","token","Promise","resolve","reject","_this$socket","connected","disconnect","cleanToken","replace","userId","localStorage","getItem","path","auth","transports","reconnectionAttempts","reconnectionDelay","query","extraHeaders","withCredentials","on","_this$socket2","console","log","id","err","error","message","_SocketService","socketService"],"sources":["C:/Users/DELL/Documents/projects/suxch/chat-client/src/services/socket.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\n\nclass SocketService {\n    private static instance: SocketService;\n    socket: Socket | null = null;\n\n    public static getInstance(): SocketService {\n        if (!SocketService.instance) {\n            SocketService.instance = new SocketService();\n        }\n        return SocketService.instance;\n    }\n\n    initializeSocket(token: string): Promise<Socket> {\n        return new Promise((resolve, reject) => {\n            if (this.socket?.connected) return resolve(this.socket);\n\n            // Clean up existing connection\n            if (this.socket) {\n                this.socket.disconnect();\n                this.socket = null;\n            }\n\n            const cleanToken = token.replace('Bearer ', '');\n            const userId = localStorage.getItem('userId');\n\n            this.socket = io('http://localhost:8080',  { \n                path: '/socket.io',\n                auth: { token: cleanToken },\n                transports: ['websocket'],\n                reconnectionAttempts: 3,\n                reconnectionDelay: 1000,\n                query: { userId },\n                extraHeaders: {\n                    'Authorization': `Bearer ${cleanToken}`\n                },\n                withCredentials: true\n            });\n\n            this.socket.on('connect', () => {\n                console.log('Client socket connected:', this.socket?.id);\n                resolve(this.socket!);\n              });\n              \n            this.socket.on('connect_error', (err) => {\n                console.error('Connection error:', err.message);\n                reject(err);\n            });\n        });\n    }\n\n    disconnect() {\n        if (this.socket) {\n            this.socket.disconnect();\n            this.socket = null;\n        }\n    }\n\n    \n}\n\nexport const socketService = SocketService.getInstance();"],"mappings":";AAAA,SAASA,EAAE,QAAgB,kBAAkB;AAE7C,MAAMC,aAAa,CAAC;EAAAC,YAAA;IAAA,KAEhBC,MAAM,GAAkB,IAAI;EAAA;EAE5B,OAAcC,WAAWA,CAAA,EAAkB;IACvC,IAAI,CAACH,aAAa,CAACI,QAAQ,EAAE;MACzBJ,aAAa,CAACI,QAAQ,GAAG,IAAIJ,aAAa,CAAC,CAAC;IAChD;IACA,OAAOA,aAAa,CAACI,QAAQ;EACjC;EAEAC,gBAAgBA,CAACC,KAAa,EAAmB;IAC7C,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MAAA,IAAAC,YAAA;MACpC,KAAAA,YAAA,GAAI,IAAI,CAACR,MAAM,cAAAQ,YAAA,eAAXA,YAAA,CAAaC,SAAS,EAAE,OAAOH,OAAO,CAAC,IAAI,CAACN,MAAM,CAAC;;MAEvD;MACA,IAAI,IAAI,CAACA,MAAM,EAAE;QACb,IAAI,CAACA,MAAM,CAACU,UAAU,CAAC,CAAC;QACxB,IAAI,CAACV,MAAM,GAAG,IAAI;MACtB;MAEA,MAAMW,UAAU,GAAGP,KAAK,CAACQ,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;MAC/C,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;MAE7C,IAAI,CAACf,MAAM,GAAGH,EAAE,CAAC,uBAAuB,EAAG;QACvCmB,IAAI,EAAE,YAAY;QAClBC,IAAI,EAAE;UAAEb,KAAK,EAAEO;QAAW,CAAC;QAC3BO,UAAU,EAAE,CAAC,WAAW,CAAC;QACzBC,oBAAoB,EAAE,CAAC;QACvBC,iBAAiB,EAAE,IAAI;QACvBC,KAAK,EAAE;UAAER;QAAO,CAAC;QACjBS,YAAY,EAAE;UACV,eAAe,EAAE,UAAUX,UAAU;QACzC,CAAC;QACDY,eAAe,EAAE;MACrB,CAAC,CAAC;MAEF,IAAI,CAACvB,MAAM,CAACwB,EAAE,CAAC,SAAS,EAAE,MAAM;QAAA,IAAAC,aAAA;QAC5BC,OAAO,CAACC,GAAG,CAAC,0BAA0B,GAAAF,aAAA,GAAE,IAAI,CAACzB,MAAM,cAAAyB,aAAA,uBAAXA,aAAA,CAAaG,EAAE,CAAC;QACxDtB,OAAO,CAAC,IAAI,CAACN,MAAO,CAAC;MACvB,CAAC,CAAC;MAEJ,IAAI,CAACA,MAAM,CAACwB,EAAE,CAAC,eAAe,EAAGK,GAAG,IAAK;QACrCH,OAAO,CAACI,KAAK,CAAC,mBAAmB,EAAED,GAAG,CAACE,OAAO,CAAC;QAC/CxB,MAAM,CAACsB,GAAG,CAAC;MACf,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EAEAnB,UAAUA,CAAA,EAAG;IACT,IAAI,IAAI,CAACV,MAAM,EAAE;MACb,IAAI,CAACA,MAAM,CAACU,UAAU,CAAC,CAAC;MACxB,IAAI,CAACV,MAAM,GAAG,IAAI;IACtB;EACJ;AAGJ;AAACgC,cAAA,GAzDKlC,aAAa;AAAbA,aAAa,CACAI,QAAQ;AA0D3B,OAAO,MAAM+B,aAAa,GAAGnC,aAAa,CAACG,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}