{"ast":null,"code":"var _SocketService;\nimport { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n  }\n  static getInstance() {\n    if (!SocketService.instance) {\n      SocketService.instance = new SocketService();\n    }\n    return SocketService.instance;\n  }\n  initializeSocket(token) {\n    return new Promise((resolve, reject) => {\n      var _this$socket;\n      if ((_this$socket = this.socket) !== null && _this$socket !== void 0 && _this$socket.connected) {\n        console.log(\"WebSocket already connected\");\n        return resolve(this.socket);\n      }\n      const cleanToken = token.replace('Bearer ', '');\n      const userId = localStorage.getItem('userId');\n      if (!userId) {\n        return reject(new Error('Missing userId in localStorage'));\n      }\n      if (!this.isTokenValid(cleanToken)) {\n        return reject(new Error('Invalid or expired token'));\n      }\n      this.socket = io('http://localhost:8080', {\n        path: '/socket.io',\n        auth: {\n          token: cleanToken\n        },\n        transports: ['websocket'],\n        reconnectionAttempts: 5,\n        reconnectionDelay: 2000,\n        query: {\n          userId,\n          token: cleanToken\n        },\n        withCredentials: true\n      });\n      this.socket.on('connect', () => {\n        console.log(\"WebSocket connected\");\n        resolve(this.socket);\n      });\n      this.socket.on('disconnect', reason => {\n        console.log(`Disconnected: ${reason}`);\n        if (reason === 'io server disconnect') {\n          console.log('Server disconnected the client. Retrying...');\n          setTimeout(() => this.initializeSocket(token), 5000); // Retry after 5 seconds\n        } else if (reason === 'io client disconnect') {\n          console.log('Client disconnected intentionally.');\n        } else {\n          console.log('Disconnected due to network issues. Retrying...');\n          setTimeout(() => this.initializeSocket(token), 5000); // Retry after 5 seconds\n        }\n      });\n      this.socket.on('connect_error', err => {\n        console.error('Connection error:', err.message);\n        reject(err);\n      });\n    });\n  }\n  onConnectionStatusChange(callback) {\n    if (!this.socket) return;\n    this.socket.on('connect', () => callback('connected'));\n    this.socket.on('disconnect', () => callback('disconnected'));\n    this.socket.on('connect_error', () => callback('error'));\n    this.socket.on('reconnect_failed', () => callback('error'));\n  }\n  disconnect() {\n    if (this.socket) {\n      console.log(\"üîå Disconnecting WebSocket...\");\n      console.trace(\"WebSocket disconnect called\");\n      this.socket.disconnect();\n      this.socket = null;\n      console.log(\"üîå WebSocket disconnected\");\n    }\n  }\n  isTokenValid(token) {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.exp * 1000 > Date.now(); // Check if token is expired\n    } catch {\n      return false;\n    }\n  }\n}\n_SocketService = SocketService;\nSocketService.instance = void 0;\nexport const socketService = SocketService.getInstance();\n\n// const connectSocket = async () => {\n//   let token = localStorage.getItem('token');\n//   if (!token || !socketService.isTokenValid(token)) {\n//     token = await refreshToken();\n\n//     async function refreshToken(): Promise<string | null> {\n//       // Example implementation of refreshToken\n//       try {\n//         const response = await fetch('http://localhost:8080/api/refresh-token', {\n//           method: 'POST',\n//           credentials: 'include',\n//         });\n//         if (!response.ok) throw new Error('Failed to refresh token');\n//         const data = await response.json();\n//         localStorage.setItem('token', data.token);\n//         return data.token;\n//       } catch (error) {\n//         console.error('Error refreshing token:', error);\n//         return null;\n//       }\n//     }\n//     if (!token) {\n//       navigate('/login');\n//       return;\n//     }\n//   }\n\n//   try {\n//     const socket = await socketService.initializeSocket(token);\n//     socketService.onConnectionStatusChange(setConnectionStatus);\n//   } catch (error) {\n//     console.error('Socket connection error:', error);\n//     setConnectionStatus('error');\n//   }\n// };\n\nfunction setConnectionStatus(status) {\n  const statusElement = document.getElementById('connection-status');\n  if (!statusElement) {\n    console.warn('Connection status element not found in the DOM.');\n    return;\n  }\n  switch (status) {\n    case 'connected':\n      statusElement.textContent = 'üü¢ Connected';\n      statusElement.style.color = 'green';\n      break;\n    case 'disconnected':\n      statusElement.textContent = 'üî¥ Disconnected';\n      statusElement.style.color = 'red';\n      break;\n    case 'error':\n      statusElement.textContent = '‚ö†Ô∏è Connection Error';\n      statusElement.style.color = 'orange';\n      break;\n  }\n}","map":{"version":3,"names":["io","SocketService","constructor","socket","getInstance","instance","initializeSocket","token","Promise","resolve","reject","_this$socket","connected","console","log","cleanToken","replace","userId","localStorage","getItem","Error","isTokenValid","path","auth","transports","reconnectionAttempts","reconnectionDelay","query","withCredentials","on","reason","setTimeout","err","error","message","onConnectionStatusChange","callback","disconnect","trace","payload","JSON","parse","atob","split","exp","Date","now","_SocketService","socketService","setConnectionStatus","status","statusElement","document","getElementById","warn","textContent","style","color"],"sources":["C:/Users/DELL/Documents/projects/suxch/chat-client/src/services/socket.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\nimport { useNavigate } from 'react-router-dom';\n\n\nclass SocketService {\n  private static instance: SocketService;\n  socket: Socket | null = null;\n\n  public static getInstance(): SocketService {\n    if (!SocketService.instance) {\n      SocketService.instance = new SocketService();\n    }\n    return SocketService.instance;\n  }\n\n  initializeSocket(token: string): Promise<Socket> {\n    return new Promise((resolve, reject) => {\n      if (this.socket?.connected) {\n        console.log(\"WebSocket already connected\");\n        return resolve(this.socket);\n      }\n\n      const cleanToken = token.replace('Bearer ', '');\n      const userId = localStorage.getItem('userId');\n\n      if (!userId) {\n        return reject(new Error('Missing userId in localStorage'));\n      }\n\n      if (!this.isTokenValid(cleanToken)) {\n        return reject(new Error('Invalid or expired token'));\n      }\n\n      this.socket = io('http://localhost:8080', {\n        path: '/socket.io',\n        auth: { token: cleanToken },\n        transports: ['websocket'],\n        reconnectionAttempts: 5,\n        reconnectionDelay: 2000,\n        query: { userId, token: cleanToken },\n        withCredentials: true,\n      });\n\n      this.socket.on('connect', () => {\n        console.log(\"WebSocket connected\");\n        resolve(this.socket!);\n      });\n\n      this.socket.on('disconnect', (reason) => {\n        console.log(`Disconnected: ${reason}`);\n        if (reason === 'io server disconnect') {\n          console.log('Server disconnected the client. Retrying...');\n          setTimeout(() => this.initializeSocket(token), 5000); // Retry after 5 seconds\n        } else if (reason === 'io client disconnect') {\n          console.log('Client disconnected intentionally.');\n        } else {\n          console.log('Disconnected due to network issues. Retrying...');\n          setTimeout(() => this.initializeSocket(token), 5000); // Retry after 5 seconds\n        }\n      });\n\n      this.socket.on('connect_error', (err) => {\n        console.error('Connection error:', err.message);\n        reject(err);\n      });\n    });\n  }\n\n  onConnectionStatusChange(callback: (status: 'connected' | 'disconnected' | 'error') => void) {\n    if (!this.socket) return;\n\n    this.socket.on('connect', () => callback('connected'));\n    this.socket.on('disconnect', () => callback('disconnected'));\n    this.socket.on('connect_error', () => callback('error'));\n    this.socket.on('reconnect_failed', () => callback('error'));\n  }\n\n  disconnect() {\n    if (this.socket) {\n      console.log(\"üîå Disconnecting WebSocket...\");\n      console.trace(\"WebSocket disconnect called\");\n      this.socket.disconnect();\n      this.socket = null;\n      console.log(\"üîå WebSocket disconnected\");\n    }\n  }\n\n  public isTokenValid(token: string): boolean {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.exp * 1000 > Date.now(); // Check if token is expired\n    } catch {\n      return false;\n    }\n  }\n}\n\nexport const socketService = SocketService.getInstance();\n\n// const connectSocket = async () => {\n//   let token = localStorage.getItem('token');\n//   if (!token || !socketService.isTokenValid(token)) {\n//     token = await refreshToken();\n\n//     async function refreshToken(): Promise<string | null> {\n//       // Example implementation of refreshToken\n//       try {\n//         const response = await fetch('http://localhost:8080/api/refresh-token', {\n//           method: 'POST',\n//           credentials: 'include',\n//         });\n//         if (!response.ok) throw new Error('Failed to refresh token');\n//         const data = await response.json();\n//         localStorage.setItem('token', data.token);\n//         return data.token;\n//       } catch (error) {\n//         console.error('Error refreshing token:', error);\n//         return null;\n//       }\n//     }\n//     if (!token) {\n//       navigate('/login');\n//       return;\n//     }\n//   }\n\n//   try {\n//     const socket = await socketService.initializeSocket(token);\n//     socketService.onConnectionStatusChange(setConnectionStatus);\n//   } catch (error) {\n//     console.error('Socket connection error:', error);\n//     setConnectionStatus('error');\n//   }\n// };\n\nfunction setConnectionStatus(status: 'connected' | 'disconnected' | 'error'): void {\n  const statusElement = document.getElementById('connection-status');\n  if (!statusElement) {\n    console.warn('Connection status element not found in the DOM.');\n    return;\n  }\n\n  switch (status) {\n    case 'connected':\n      statusElement.textContent = 'üü¢ Connected';\n      statusElement.style.color = 'green';\n      break;\n    case 'disconnected':\n      statusElement.textContent = 'üî¥ Disconnected';\n      statusElement.style.color = 'red';\n      break;\n    case 'error':\n      statusElement.textContent = '‚ö†Ô∏è Connection Error';\n      statusElement.style.color = 'orange';\n      break;\n  }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}