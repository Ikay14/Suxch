{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Documents\\\\projects\\\\suxch\\\\chat-client\\\\src\\\\components\\\\Chat\\\\ChatWindow.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport './ChatWindow.css';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport UploadedFiles from './UploadedFiles';\nimport { socketService } from '../../services/socket';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatWindow = () => {\n  _s();\n  const {\n    userId,\n    receiverId\n  } = useParams();\n  const navigate = useNavigate();\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('connecting');\n  const [isUploading, setIsUploading] = useState(false);\n  const [error, setError] = useState(null);\n  const refreshToken = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/api/refresh-token', {\n        method: 'POST',\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to refresh token');\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      return data.token;\n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      return null;\n    }\n  };\n  const connectSocket = async () => {\n    try {\n      let token = localStorage.getItem('token');\n      if (!token || !socketService.isTokenValid(token)) {\n        token = await refreshToken();\n        if (!token) {\n          navigate('/login');\n          return;\n        }\n      }\n      setConnectionStatus('connecting');\n      const socket = await socketService.initializeSocket(token);\n\n      // Listen for connection status changes\n      socketService.onConnectionStatusChange(setConnectionStatus);\n      const onNewMessage = message => {\n        setMessages(prev => [...prev, message]);\n      };\n      const onFileSent = fileMessage => {\n        setMessages(prev => [...prev, fileMessage]);\n        setIsUploading(false);\n      };\n      const onError = err => {\n        console.error('Socket error:', err);\n        setError(err.message);\n        setConnectionStatus('disconnected');\n      };\n\n      // Add event listeners\n      socket.on('new_message', onNewMessage);\n      socket.on('file-sent', onFileSent);\n      socket.on('error', onError);\n      socket.on('connect_error', err => {\n        console.error('Connection error:', err);\n        setConnectionStatus('disconnected');\n      });\n\n      // Load initial messages\n      if (receiverId) {\n        socket.emit('get_messages', {\n          userId,\n          receiverId\n        }, response => {\n          if (response.status === 'success') {\n            setMessages(response.data);\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Socket connection error:', error);\n      setConnectionStatus('disconnected');\n      setError('Failed to connect to chat server');\n      navigate('/login');\n    }\n  };\n  const connectSocketWithRetry = async (retries = 3) => {\n    while (retries > 0) {\n      try {\n        await connectSocket();\n        return;\n      } catch (error) {\n        console.error('Retrying WebSocket connection...', error);\n        retries--;\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n    console.error('Failed to connect WebSocket after retries');\n    setConnectionStatus('error');\n  };\n  useEffect(() => {\n    connectSocketWithRetry();\n    return () => socketService.disconnect();\n  }, [userId, receiverId]);\n  const handleFileUpload = async event => {\n    var _event$target$files;\n    if (!((_event$target$files = event.target.files) !== null && _event$target$files !== void 0 && _event$target$files[0]) || !socketService.socket || !userId) return;\n    const file = event.target.files[0];\n    setIsUploading(true);\n    setError(null);\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('senderId', userId);\n      if (receiverId) {\n        formData.append('receiverId', receiverId);\n      }\n      socketService.socket.emit('fileUpload', formData, response => {\n        if (response.status !== 'success') {\n          throw new Error(response.message || 'File upload failed');\n        }\n      });\n      setUploadedFiles(prev => [...prev, file]);\n    } catch (error) {\n      console.error('File upload error:', error);\n      setError(error instanceof Error ? error.message : 'File upload failed');\n      setIsUploading(false);\n    }\n  };\n  const handleSendMessage = message => {\n    var _socketService$socket;\n    if (!((_socketService$socket = socketService.socket) !== null && _socketService$socket !== void 0 && _socketService$socket.connected) || !userId) {\n      setError('Not connected to chat server');\n      return;\n    }\n    setError(null);\n    const messageData = receiverId ? {\n      senderId: userId,\n      receiverId,\n      content: message\n    } : {\n      senderId: userId,\n      content: message\n    };\n    socketService.socket.emit('send_message', messageData, response => {\n      if (response.status !== 'success') {\n        setError(response.message || 'Failed to send message');\n      }\n    });\n  };\n  const renderConnectionStatus = () => {\n    switch (connectionStatus) {\n      case 'connecting':\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"connecting\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 45\n          }, this), \" Connecting...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 16\n        }, this);\n      case 'connected':\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"connected\",\n          children: \"Connected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 16\n        }, this);\n      case 'disconnected':\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"disconnected\",\n          children: \"Disconnected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 16\n        }, this);\n      default:\n        return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Chat Room - User: \", localStorage.getItem('username')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connection-status\",\n        children: renderConnectionStatus()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-content\",\n      children: userId && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          messages: messages,\n          currentUserId: userId,\n          receiverId: receiverId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(UploadedFiles, {\n          files: uploadedFiles,\n          isUploading: isUploading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-input-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"file-upload\",\n            className: \"file-upload-icon\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"file-upload\",\n              type: \"file\",\n              style: {\n                display: 'none'\n              },\n              onChange: handleFileUpload,\n              disabled: isUploading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            onSend: handleSendMessage,\n            disabled: connectionStatus !== 'connected' || isUploading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatWindow, \"l4fv7REIFKqBFFel8iBc/Rgaq1w=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","MessageList","MessageInput","UploadedFiles","socketService","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatWindow","_s","userId","receiverId","navigate","uploadedFiles","setUploadedFiles","messages","setMessages","isTyping","setIsTyping","connectionStatus","setConnectionStatus","isUploading","setIsUploading","error","setError","refreshToken","response","fetch","method","credentials","ok","Error","data","json","localStorage","setItem","token","console","connectSocket","getItem","isTokenValid","socket","initializeSocket","onConnectionStatusChange","onNewMessage","message","prev","onFileSent","fileMessage","onError","err","on","emit","status","connectSocketWithRetry","retries","Promise","resolve","setTimeout","disconnect","handleFileUpload","event","_event$target$files","target","files","file","formData","FormData","append","handleSendMessage","_socketService$socket","connected","messageData","senderId","content","renderConnectionStatus","className","children","fileName","_jsxFileName","lineNumber","columnNumber","currentUserId","htmlFor","id","type","style","display","onChange","disabled","onSend","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Documents/projects/suxch/chat-client/src/components/Chat/ChatWindow.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport './ChatWindow.css';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport UploadedFiles from './UploadedFiles';\nimport { FaPaperclip, FaSpinner } from 'react-icons/fa';\nimport { socketService } from '../../services/socket';\n\ninterface ChatParams {\n  userId: string;\n  receiverId?: string;\n  [key: string]: string | undefined;\n}\n\ninterface Message {\n  id: string;\n  senderId: string;\n  receiverId: string | undefined;\n  content: string;\n  timestamp: Date;\n  status?: 'delivered' | 'read';\n  chatId: string;\n}\n\nconst ChatWindow: React.FC = () => {\n  const { userId, receiverId } = useParams<ChatParams>();\n  const navigate = useNavigate();\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState<'connecting' | 'connected' | 'disconnected' | 'error'>('connecting');\n  const [isUploading, setIsUploading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const refreshToken = async (): Promise<string | null> => {\n    try {\n      const response = await fetch('http://localhost:8080/api/refresh-token', {\n        method: 'POST',\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Failed to refresh token');\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      return data.token;\n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      return null;\n    }\n  };\n\n  const connectSocket = async () => {\n    try {\n      let token = localStorage.getItem('token');\n      if (!token || !socketService.isTokenValid(token)) {\n        token = await refreshToken();\n        if (!token) {\n          navigate('/login');\n          return;\n        }\n      }\n\n      setConnectionStatus('connecting');\n\n      const socket = await socketService.initializeSocket(token);\n\n      // Listen for connection status changes\n      socketService.onConnectionStatusChange(setConnectionStatus);\n\n      const onNewMessage = (message: Message) => {\n        setMessages(prev => [...prev, message]);\n      };\n\n      const onFileSent = (fileMessage: Message) => {\n        setMessages(prev => [...prev, fileMessage]);\n        setIsUploading(false);\n      };\n\n      const onError = (err: Error) => {\n        console.error('Socket error:', err);\n        setError(err.message);\n        setConnectionStatus('disconnected');\n      };\n\n      // Add event listeners\n      socket.on('new_message', onNewMessage);\n      socket.on('file-sent', onFileSent);\n      socket.on('error', onError);\n      socket.on('connect_error', (err: Error) => {\n        console.error('Connection error:', err);\n        setConnectionStatus('disconnected');\n      });\n\n      // Load initial messages\n      if (receiverId) {\n        socket.emit('get_messages', { userId, receiverId }, (response: any) => {\n          if (response.status === 'success') {\n            setMessages(response.data);\n          }\n        });\n      }\n    } catch (error: any) {\n      console.error('Socket connection error:', error);\n      setConnectionStatus('disconnected');\n      setError('Failed to connect to chat server');\n      navigate('/login');\n    }\n  };\n\n  const connectSocketWithRetry = async (retries = 3) => {\n    while (retries > 0) {\n      try {\n        await connectSocket();\n        return;\n      } catch (error) {\n        console.error('Retrying WebSocket connection...', error);\n        retries--;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n    console.error('Failed to connect WebSocket after retries');\n    setConnectionStatus('error');\n  };\n\n  useEffect(() => {\n    connectSocketWithRetry();\n    return () => socketService.disconnect();\n  }, [userId, receiverId]);\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!event.target.files?.[0] || !socketService.socket || !userId) return;\n\n    const file = event.target.files[0];\n    setIsUploading(true);\n    setError(null);\n\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('senderId', userId);\n      if (receiverId) {\n        formData.append('receiverId', receiverId);\n      }\n\n      socketService.socket.emit('fileUpload', formData, (response: any) => {\n        if (response.status !== 'success') {\n          throw new Error(response.message || 'File upload failed');\n        }\n      });\n\n      setUploadedFiles(prev => [...prev, file]);\n    } catch (error) {\n      console.error('File upload error:', error);\n      setError(error instanceof Error ? error.message : 'File upload failed');\n      setIsUploading(false);\n    }\n  };\n\n  const handleSendMessage = (message: string) => {\n    if (!socketService.socket?.connected || !userId) {\n      setError('Not connected to chat server');\n      return;\n    }\n\n    setError(null);\n    \n    const messageData = receiverId \n      ? { senderId: userId, receiverId, content: message }\n      : { senderId: userId, content: message };\n\n    socketService.socket.emit('send_message', messageData, (response: any) => {\n      if (response.status !== 'success') {\n        setError(response.message || 'Failed to send message');\n      }\n    });\n  };\n\n  const renderConnectionStatus = () => {\n    switch (connectionStatus) {\n      case 'connecting':\n        return <span className=\"connecting\"><span className=\"spinner\"></span> Connecting...</span>;\n      case 'connected':\n        return <span className=\"connected\">Connected</span>;\n      case 'disconnected':\n        return <span className=\"disconnected\">Disconnected</span>;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-header\">\n        <h1>Chat Room - User: {localStorage.getItem('username')}</h1>\n        <div className=\"connection-status\">\n          {renderConnectionStatus()}\n        </div>\n      </div>\n\n      {error && <div className=\"error-message\">{error}</div>}\n\n      <div className=\"chat-content\">\n        {userId && (\n          <>\n            <MessageList \n              messages={messages} \n              currentUserId={userId} \n              receiverId={receiverId} \n            />\n            \n            <UploadedFiles \n              files={uploadedFiles} \n              isUploading={isUploading} \n            />\n            \n            <div className=\"chat-input-area\">\n              <label htmlFor=\"file-upload\" className=\"file-upload-icon\">\n               \n                <input\n                  id=\"file-upload\"\n                  type=\"file\"\n                  style={{ display: 'none' }}\n                  onChange={handleFileUpload}\n                  disabled={isUploading}\n                />\n              </label>\n              \n              <MessageInput \n                onSend={handleSendMessage} \n                disabled={connectionStatus !== 'connected' || isUploading}\n              />\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatWindow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}