{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n  }\n  // Initialize the socket connection with token and userId\n  async initializeSocket(token, userId) {\n    if (this.socket) {\n      console.log('Socket already initialized');\n      return;\n    }\n    console.log('Initializing socket with token and userId:', token, userId);\n    this.socket = io('http://localhost:8080', {\n      query: {\n        token,\n        userId\n      } // Send both token and userId as query parameters\n    });\n    this.socket.on('connect', () => {\n      var _this$socket;\n      console.log('WebSocket connected:', (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.id);\n    });\n    this.socket.on('disconnect', () => {\n      console.log('WebSocket disconnected');\n    });\n  }\n\n  // Get the socket instance\n  getSocket() {\n    return this.socket;\n  }\n\n  // Disconnect the socket\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      console.log('WebSocket disconnected');\n    }\n  }\n}\nexport const socketService = new SocketService();","map":{"version":3,"names":["io","SocketService","constructor","socket","initializeSocket","token","userId","console","log","query","on","_this$socket","id","getSocket","disconnect","socketService"],"sources":["C:/Users/DELL/Documents/projects/suxch/chat-client/src/services/socket.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\n\nclass SocketService {\n  private socket: Socket | null = null;\n\n  // Initialize the socket connection with token and userId\n  async initializeSocket(token: string, userId: string): Promise<void> {\n    if (this.socket) {\n      console.log('Socket already initialized');\n      return;\n    }\n\n    console.log('Initializing socket with token and userId:', token, userId);\n    this.socket = io('http://localhost:8080', {\n      query: { token, userId }, // Send both token and userId as query parameters\n    });\n\n    this.socket.on('connect', () => {\n      console.log('WebSocket connected:', this.socket?.id);\n    });\n\n    this.socket.on('disconnect', () => {\n      console.log('WebSocket disconnected');\n    });\n  }\n\n  // Get the socket instance\n  getSocket(): Socket | null {\n    return this.socket;\n  }\n\n  // Disconnect the socket\n  disconnect(): void {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      console.log('WebSocket disconnected');\n    }\n  }\n}\n\nexport const socketService = new SocketService();\n"],"mappings":"AAAA,SAASA,EAAE,QAAgB,kBAAkB;AAE7C,MAAMC,aAAa,CAAC;EAAAC,YAAA;IAAA,KACVC,MAAM,GAAkB,IAAI;EAAA;EAEpC;EACA,MAAMC,gBAAgBA,CAACC,KAAa,EAAEC,MAAc,EAAiB;IACnE,IAAI,IAAI,CAACH,MAAM,EAAE;MACfI,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzC;IACF;IAEAD,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEH,KAAK,EAAEC,MAAM,CAAC;IACxE,IAAI,CAACH,MAAM,GAAGH,EAAE,CAAC,uBAAuB,EAAE;MACxCS,KAAK,EAAE;QAAEJ,KAAK;QAAEC;MAAO,CAAC,CAAE;IAC5B,CAAC,CAAC;IAEF,IAAI,CAACH,MAAM,CAACO,EAAE,CAAC,SAAS,EAAE,MAAM;MAAA,IAAAC,YAAA;MAC9BJ,OAAO,CAACC,GAAG,CAAC,sBAAsB,GAAAG,YAAA,GAAE,IAAI,CAACR,MAAM,cAAAQ,YAAA,uBAAXA,YAAA,CAAaC,EAAE,CAAC;IACtD,CAAC,CAAC;IAEF,IAAI,CAACT,MAAM,CAACO,EAAE,CAAC,YAAY,EAAE,MAAM;MACjCH,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACvC,CAAC,CAAC;EACJ;;EAEA;EACAK,SAASA,CAAA,EAAkB;IACzB,OAAO,IAAI,CAACV,MAAM;EACpB;;EAEA;EACAW,UAAUA,CAAA,EAAS;IACjB,IAAI,IAAI,CAACX,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACW,UAAU,CAAC,CAAC;MACxB,IAAI,CAACX,MAAM,GAAG,IAAI;MAClBI,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACvC;EACF;AACF;AAEA,OAAO,MAAMO,aAAa,GAAG,IAAId,aAAa,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}