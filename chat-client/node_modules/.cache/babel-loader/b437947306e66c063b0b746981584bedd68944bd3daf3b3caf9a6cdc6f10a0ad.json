{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n  }\n  // Modify initializeSocket to accept both accessToken and userId\n  async initializeSocket(accessToken, userId) {\n    if (this.socket) {\n      console.log('Socket already initialized');\n      return;\n    }\n    console.log('Initializing socket with token and userId:', accessToken, userId);\n\n    // Initialize the socket connection with both token and userId\n    this.socket = io('http://localhost:8080', {\n      auth: {\n        token: accessToken,\n        userId: userId // Send userId as part of the auth object\n      },\n      transports: ['websocket']\n    });\n    this.socket.on('connect', () => {\n      var _this$socket;\n      console.log('WebSocket connected:', (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.id);\n    });\n    this.socket.on('disconnect', () => {\n      console.log('WebSocket disconnected');\n    });\n    this.socket.on('send_message', message => {\n      console.log('Received message:', message);\n    });\n    this.socket.on('fileUpload', file => {\n      console.log('Received file:', file);\n    });\n    this.socket.on('deleteMessage', message => {\n      console.log('deleted message:', message);\n    });\n    this.socket.on('UpdatedMessage', message => {\n      console.log('Received message:', message);\n    });\n    this.socket.on('getUserChatsMessage', message => {\n      console.log('Received message:', message);\n    });\n    this.socket.on('read_receipt', message => {\n      console.log('Received message:', message);\n    });\n    this.socket.on('typingt', message => {\n      console.log('Received message:', message);\n    });\n    this.socket.on('connect_error', err => {\n      console.error('Connection error:', err);\n    });\n    this.socket.on('connect_timeout', () => {\n      console.log('Connection timeout');\n    });\n  }\n\n  // Method to get the socket instance\n  getSocket() {\n    return this.socket;\n  }\n\n  // Disconnect the socket\n  disconnect() {\n    if (this.socket) {\n      console.log('Disconnecting WebSocket...');\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n  // Method to send a message\n  async sendMessage(receiverId, message) {\n    var _this$socket2;\n    const accessToken = localStorage.getItem('accessToken'); // Assuming JWT is in localStorage\n    const userId = localStorage.getItem('userId'); // Assuming userId is stored in localStorage\n\n    if (!accessToken || !userId) {\n      console.error('User is not authenticated');\n      return;\n    }\n\n    // Emitting the send_message event to the server\n    (_this$socket2 = this.socket) === null || _this$socket2 === void 0 ? void 0 : _this$socket2.emit('send_message', {\n      receiverId,\n      message,\n      senderId: userId\n    }, response => {\n      if (response.status === 'success') {\n        console.log('Message sent successfully:', response.data);\n      } else {\n        console.error('Error sending message:', response.message);\n      }\n    });\n  }\n}\nexport const socketService = new SocketService();","map":{"version":3,"names":["io","SocketService","constructor","socket","initializeSocket","accessToken","userId","console","log","auth","token","transports","on","_this$socket","id","message","file","err","error","getSocket","disconnect","sendMessage","receiverId","_this$socket2","localStorage","getItem","emit","senderId","response","status","data","socketService"],"sources":["C:/Users/DELL/Documents/projects/suxch/chat-client/src/services/socket.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\n\nclass SocketService {\n  private socket: Socket | null = null;\n\n  // Modify initializeSocket to accept both accessToken and userId\n  async initializeSocket(accessToken: string, userId: string): Promise<void> {\n    if (this.socket) {\n      console.log('Socket already initialized');\n      return;\n    }\n\n    console.log('Initializing socket with token and userId:', accessToken, userId);\n\n    // Initialize the socket connection with both token and userId\n    this.socket = io('http://localhost:8080', {\n      auth: {\n        token: accessToken,\n        userId: userId, // Send userId as part of the auth object\n      },\n      transports: ['websocket'],\n    });\n\n    this.socket.on('connect', () => {\n      console.log('WebSocket connected:', this.socket?.id);\n    });\n\n    this.socket.on('disconnect', () => {\n      console.log('WebSocket disconnected');\n    });\n\n    this.socket.on('send_message', (message: string) => {\n      console.log('Received message:', message);\n    });\n    this.socket.on('fileUpload', (file: any) => {\n      console.log('Received file:', file);\n    });\n    this.socket.on('deleteMessage', (message: string) => {\n      console.log('deleted message:', message);\n    });\n    this.socket.on('UpdatedMessage', (message: string) => {\n      console.log('Received message:', message);\n    });\n    this.socket.on('getUserChatsMessage', (message: string) => {\n      console.log('Received message:', message);\n    });\n    this.socket.on('read_receipt', (message: string) => {\n      console.log('Received message:', message);\n    });\n    this.socket.on('typingt', (message: string) => {\n      console.log('Received message:', message);\n    });\n\n    this.socket.on('connect_error', (err) => {\n      console.error('Connection error:', err);\n    });\n\n    this.socket.on('connect_timeout', () => {\n      console.log('Connection timeout');\n    });\n  }\n\n  // Method to get the socket instance\n  public getSocket(): Socket | null {\n    return this.socket;\n  }\n\n  // Disconnect the socket\n  disconnect(): void {\n    if (this.socket) {\n      console.log('Disconnecting WebSocket...');\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n  // Method to send a message\nasync sendMessage(receiverId: string, message: string): Promise<void> {\n  const accessToken = localStorage.getItem('accessToken');  // Assuming JWT is in localStorage\n  const userId = localStorage.getItem('userId');  // Assuming userId is stored in localStorage\n\n  if (!accessToken || !userId) {\n    console.error('User is not authenticated');\n    return;\n  }\n\n  // Emitting the send_message event to the server\n  this.socket?.emit('send_message', { \n    receiverId, \n    message, \n    senderId: userId \n  }, (response: any) => {\n    if (response.status === 'success') {\n      console.log('Message sent successfully:', response.data);\n    } else {\n      console.error('Error sending message:', response.message);\n    }\n  });\n}\n\n}\nexport const socketService = new SocketService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}