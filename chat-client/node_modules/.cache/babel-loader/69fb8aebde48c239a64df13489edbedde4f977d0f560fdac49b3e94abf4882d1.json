{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n  }\n  async initializeSocket(token) {\n    if (this.socket) {\n      return this.socket;\n    }\n    return new Promise((resolve, reject) => {\n      const socket = io('http://localhost:8080', {\n        query: {\n          token\n        },\n        transports: ['websocket']\n      });\n      socket.on('connect', () => {\n        console.log('WebSocket connected');\n        this.socket = socket;\n        resolve(socket);\n      });\n      socket.on('connect_error', err => {\n        console.error('WebSocket connection error:', err);\n        reject(err);\n      });\n    });\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n  onConnectionStatusChange(callback) {\n    if (this.socket) {\n      this.socket.on('connect', () => callback('connected'));\n      this.socket.on('disconnect', () => callback('disconnected'));\n      this.socket.on('error', () => callback('error'));\n    }\n  }\n}\nexport const socketService = new SocketService();","map":{"version":3,"names":["io","SocketService","constructor","socket","initializeSocket","token","Promise","resolve","reject","query","transports","on","console","log","err","error","disconnect","onConnectionStatusChange","callback","socketService"],"sources":["C:/Users/DELL/Documents/projects/suxch/chat-client/src/services/socket.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\n\nclass SocketService {\n  public socket: Socket | null = null;\n\n  async initializeSocket(token: string): Promise<Socket> {\n    if (this.socket) {\n      return this.socket;\n    }\n\n    return new Promise((resolve, reject) => {\n      const socket = io('http://localhost:8080', {\n        query: { token },\n        transports: ['websocket'],\n      });\n\n      socket.on('connect', () => {\n        console.log('WebSocket connected');\n        this.socket = socket;\n        resolve(socket);\n      });\n\n      socket.on('connect_error', (err) => {\n        console.error('WebSocket connection error:', err);\n        reject(err);\n      });\n    });\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n\n  onConnectionStatusChange(callback: (status: string) => void) {\n    if (this.socket) {\n      this.socket.on('connect', () => callback('connected'));\n      this.socket.on('disconnect', () => callback('disconnected'));\n      this.socket.on('error', () => callback('error'));\n    }\n  }\n}\n\nexport const socketService = new SocketService();\n"],"mappings":"AAAA,SAASA,EAAE,QAAgB,kBAAkB;AAE7C,MAAMC,aAAa,CAAC;EAAAC,YAAA;IAAA,KACXC,MAAM,GAAkB,IAAI;EAAA;EAEnC,MAAMC,gBAAgBA,CAACC,KAAa,EAAmB;IACrD,IAAI,IAAI,CAACF,MAAM,EAAE;MACf,OAAO,IAAI,CAACA,MAAM;IACpB;IAEA,OAAO,IAAIG,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAML,MAAM,GAAGH,EAAE,CAAC,uBAAuB,EAAE;QACzCS,KAAK,EAAE;UAAEJ;QAAM,CAAC;QAChBK,UAAU,EAAE,CAAC,WAAW;MAC1B,CAAC,CAAC;MAEFP,MAAM,CAACQ,EAAE,CAAC,SAAS,EAAE,MAAM;QACzBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;QAClC,IAAI,CAACV,MAAM,GAAGA,MAAM;QACpBI,OAAO,CAACJ,MAAM,CAAC;MACjB,CAAC,CAAC;MAEFA,MAAM,CAACQ,EAAE,CAAC,eAAe,EAAGG,GAAG,IAAK;QAClCF,OAAO,CAACG,KAAK,CAAC,6BAA6B,EAAED,GAAG,CAAC;QACjDN,MAAM,CAACM,GAAG,CAAC;MACb,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAE,UAAUA,CAAA,EAAG;IACX,IAAI,IAAI,CAACb,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACa,UAAU,CAAC,CAAC;MACxB,IAAI,CAACb,MAAM,GAAG,IAAI;IACpB;EACF;EAEAc,wBAAwBA,CAACC,QAAkC,EAAE;IAC3D,IAAI,IAAI,CAACf,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACQ,EAAE,CAAC,SAAS,EAAE,MAAMO,QAAQ,CAAC,WAAW,CAAC,CAAC;MACtD,IAAI,CAACf,MAAM,CAACQ,EAAE,CAAC,YAAY,EAAE,MAAMO,QAAQ,CAAC,cAAc,CAAC,CAAC;MAC5D,IAAI,CAACf,MAAM,CAACQ,EAAE,CAAC,OAAO,EAAE,MAAMO,QAAQ,CAAC,OAAO,CAAC,CAAC;IAClD;EACF;AACF;AAEA,OAAO,MAAMC,aAAa,GAAG,IAAIlB,aAAa,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}