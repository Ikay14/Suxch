{"ast":null,"code":"var _SocketService;\nimport { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n  }\n  static getInstance() {\n    if (!SocketService.instance) {\n      SocketService.instance = new SocketService();\n    }\n    return SocketService.instance;\n  }\n  initializeSocket(token) {\n    return new Promise((resolve, reject) => {\n      var _this$socket;\n      if ((_this$socket = this.socket) !== null && _this$socket !== void 0 && _this$socket.connected) return resolve(this.socket);\n      const cleanToken = token.replace('Bearer ', '');\n      const userId = localStorage.getItem('userId');\n      this.socket = io('http://localhost:8080', {\n        path: '/socket.io',\n        auth: {\n          token: cleanToken\n        },\n        transports: ['websocket'],\n        reconnectionAttempts: 5,\n        reconnectionDelay: 2000,\n        query: {\n          userId,\n          token: cleanToken\n        },\n        withCredentials: true\n      });\n      this.socket.on('connect', () => {\n        console.log(\"WebSocket connected\");\n        resolve(this.socket);\n      });\n      this.socket.on('disconnect', () => {\n        console.log('Disconnected. Retrying...');\n        setTimeout(() => this.initializeSocket(token), 5000);\n      });\n      this.socket.on('connect_error', err => {\n        console.error('Connection error:', err.message);\n        reject(err);\n      });\n    });\n  }\n  onConnectionStatusChange(callback) {\n    if (!this.socket) return;\n    this.socket.on('connect', () => callback('connected'));\n    this.socket.on('disconnect', () => callback('disconnected'));\n    this.socket.on('connect_error', () => callback('error'));\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      console.log(\"ðŸ”Œ WebSocket disconnected\");\n    }\n  }\n}\n_SocketService = SocketService;\nSocketService.instance = void 0;\nexport const socketService = SocketService.getInstance();","map":{"version":3,"names":["io","SocketService","constructor","socket","getInstance","instance","initializeSocket","token","Promise","resolve","reject","_this$socket","connected","cleanToken","replace","userId","localStorage","getItem","path","auth","transports","reconnectionAttempts","reconnectionDelay","query","withCredentials","on","console","log","setTimeout","err","error","message","onConnectionStatusChange","callback","disconnect","_SocketService","socketService"],"sources":["C:/Users/DELL/Documents/projects/suxch/chat-client/src/services/socket.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\n\nclass SocketService {\n  private static instance: SocketService;\n  socket: Socket | null = null;\n\n  public static getInstance(): SocketService {\n    if (!SocketService.instance) {\n      SocketService.instance = new SocketService();\n    }\n    return SocketService.instance;\n  }\n\n  initializeSocket(token: string): Promise<Socket> {\n    return new Promise((resolve, reject) => {\n      if (this.socket?.connected) return resolve(this.socket);\n\n      const cleanToken = token.replace('Bearer ', '');\n      const userId = localStorage.getItem('userId');\n\n      this.socket = io('http://localhost:8080', {\n        path: '/socket.io',\n        auth: { token: cleanToken },\n        transports: ['websocket'],\n        reconnectionAttempts: 5, \n        reconnectionDelay: 2000, \n        query: { userId, token: cleanToken },\n        withCredentials: true,\n      });\n\n      this.socket.on('connect', () => {\n        console.log(\"WebSocket connected\");\n        resolve(this.socket!);\n      });\n\n      this.socket.on('disconnect', () => {\n        console.log('Disconnected. Retrying...');\n        setTimeout(() => this.initializeSocket(token), 5000); \n      });\n\n      this.socket.on('connect_error', (err) => {\n        console.error('Connection error:', err.message);\n        reject(err);\n      });\n    });\n\n    \n  }\n\n  onConnectionStatusChange(callback: (status: 'connected' | 'disconnected' | 'error') => void) {\n    if (!this.socket) return;\n\n    this.socket.on('connect', () => callback('connected'));\n    this.socket.on('disconnect', () => callback('disconnected'));\n    this.socket.on('connect_error', () => callback('error'));\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      console.log(\"ðŸ”Œ WebSocket disconnected\");\n    }\n  }\n}\n\nexport const socketService = SocketService.getInstance();\n"],"mappings":";AAAA,SAASA,EAAE,QAAgB,kBAAkB;AAE7C,MAAMC,aAAa,CAAC;EAAAC,YAAA;IAAA,KAElBC,MAAM,GAAkB,IAAI;EAAA;EAE5B,OAAcC,WAAWA,CAAA,EAAkB;IACzC,IAAI,CAACH,aAAa,CAACI,QAAQ,EAAE;MAC3BJ,aAAa,CAACI,QAAQ,GAAG,IAAIJ,aAAa,CAAC,CAAC;IAC9C;IACA,OAAOA,aAAa,CAACI,QAAQ;EAC/B;EAEAC,gBAAgBA,CAACC,KAAa,EAAmB;IAC/C,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MAAA,IAAAC,YAAA;MACtC,KAAAA,YAAA,GAAI,IAAI,CAACR,MAAM,cAAAQ,YAAA,eAAXA,YAAA,CAAaC,SAAS,EAAE,OAAOH,OAAO,CAAC,IAAI,CAACN,MAAM,CAAC;MAEvD,MAAMU,UAAU,GAAGN,KAAK,CAACO,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;MAC/C,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;MAE7C,IAAI,CAACd,MAAM,GAAGH,EAAE,CAAC,uBAAuB,EAAE;QACxCkB,IAAI,EAAE,YAAY;QAClBC,IAAI,EAAE;UAAEZ,KAAK,EAAEM;QAAW,CAAC;QAC3BO,UAAU,EAAE,CAAC,WAAW,CAAC;QACzBC,oBAAoB,EAAE,CAAC;QACvBC,iBAAiB,EAAE,IAAI;QACvBC,KAAK,EAAE;UAAER,MAAM;UAAER,KAAK,EAAEM;QAAW,CAAC;QACpCW,eAAe,EAAE;MACnB,CAAC,CAAC;MAEF,IAAI,CAACrB,MAAM,CAACsB,EAAE,CAAC,SAAS,EAAE,MAAM;QAC9BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;QAClClB,OAAO,CAAC,IAAI,CAACN,MAAO,CAAC;MACvB,CAAC,CAAC;MAEF,IAAI,CAACA,MAAM,CAACsB,EAAE,CAAC,YAAY,EAAE,MAAM;QACjCC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;QACxCC,UAAU,CAAC,MAAM,IAAI,CAACtB,gBAAgB,CAACC,KAAK,CAAC,EAAE,IAAI,CAAC;MACtD,CAAC,CAAC;MAEF,IAAI,CAACJ,MAAM,CAACsB,EAAE,CAAC,eAAe,EAAGI,GAAG,IAAK;QACvCH,OAAO,CAACI,KAAK,CAAC,mBAAmB,EAAED,GAAG,CAACE,OAAO,CAAC;QAC/CrB,MAAM,CAACmB,GAAG,CAAC;MACb,CAAC,CAAC;IACJ,CAAC,CAAC;EAGJ;EAEAG,wBAAwBA,CAACC,QAAkE,EAAE;IAC3F,IAAI,CAAC,IAAI,CAAC9B,MAAM,EAAE;IAElB,IAAI,CAACA,MAAM,CAACsB,EAAE,CAAC,SAAS,EAAE,MAAMQ,QAAQ,CAAC,WAAW,CAAC,CAAC;IACtD,IAAI,CAAC9B,MAAM,CAACsB,EAAE,CAAC,YAAY,EAAE,MAAMQ,QAAQ,CAAC,cAAc,CAAC,CAAC;IAC5D,IAAI,CAAC9B,MAAM,CAACsB,EAAE,CAAC,eAAe,EAAE,MAAMQ,QAAQ,CAAC,OAAO,CAAC,CAAC;EAC1D;EAEAC,UAAUA,CAAA,EAAG;IACX,IAAI,IAAI,CAAC/B,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAAC+B,UAAU,CAAC,CAAC;MACxB,IAAI,CAAC/B,MAAM,GAAG,IAAI;MAClBuB,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IAC1C;EACF;AACF;AAACQ,cAAA,GA9DKlC,aAAa;AAAbA,aAAa,CACFI,QAAQ;AA+DzB,OAAO,MAAM+B,aAAa,GAAGnC,aAAa,CAACG,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}