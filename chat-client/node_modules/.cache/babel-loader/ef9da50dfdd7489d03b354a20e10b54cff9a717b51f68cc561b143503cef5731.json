{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Documents\\\\projects\\\\suxch\\\\chat-client\\\\src\\\\components\\\\Chat\\\\ChatWindow.tsx\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport './ChatWindow.css';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport UploadedFiles from './UploadedFiles';\nimport { socketService } from '../../services/socket';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatWindow = () => {\n  _s2();\n  const {\n    userId,\n    receiverId\n  } = useParams();\n  const navigate = useNavigate();\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('connecting');\n  const [isUploading, setIsUploading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Initialize socket connection\n  useEffect(() => {\n    var _s = $RefreshSig$();\n    const connectSocket = async () => {\n      _s();\n      try {\n        const token = localStorage.getItem('token');\n        if (!token || !userId) {\n          navigate('/login');\n          return;\n        }\n        const [isTyping, setIsTyping] = useState(false);\n        useEffect(() => {\n          if (!socketService.socket) return;\n          const onTyping = data => {\n            if (data.senderId === receiverId) {\n              setIsTyping(true);\n            }\n          };\n          socketService.socket.on('typing', onTyping);\n          return () => {\n            var _socketService$socket;\n            (_socketService$socket = socketService.socket) === null || _socketService$socket === void 0 ? void 0 : _socketService$socket.off('typing', onTyping);\n          };\n        }, [receiverId]);\n        setConnectionStatus('connecting');\n        await socketService.initializeSocket(token);\n        const socket = socketService.socket;\n        if (!socket) {\n          throw new Error('Socket connection failed');\n        }\n\n        // Connection event handlers\n        const onConnect = () => {\n          setConnectionStatus('connected');\n          console.log('Socket connected');\n        };\n        const onDisconnect = () => {\n          setConnectionStatus('disconnected');\n          console.log('Socket disconnected');\n        };\n        const onNewMessage = message => {\n          setMessages(prev => [...prev, message]);\n        };\n        const onFileSent = fileMessage => {\n          setMessages(prev => [...prev, fileMessage]);\n          setIsUploading(false);\n        };\n        const onError = err => {\n          console.error('Socket error:', err);\n          setError(err.message);\n        };\n\n        // Add event listeners\n        socket.on('connect', onConnect);\n        socket.on('disconnect', onDisconnect);\n        socket.on('new_message', onNewMessage);\n        socket.on('file-sent', onFileSent);\n        socket.on('error', onError);\n\n        // Load initial messages\n        if (receiverId) {\n          socket.emit('get_messages', {\n            userId,\n            receiverId\n          }, response => {\n            if (response.status === 'success') {\n              setMessages(response.data);\n            }\n          });\n        }\n        return () => {\n          // Clean up event listeners\n          socket.off('connect', onConnect);\n          socket.off('new_message', onNewMessage);\n          socket.off('file-sent', onFileSent);\n          socket.off('error', onError);\n        };\n      } catch (error) {\n        console.error('Socket connection error:', error);\n        setConnectionStatus('disconnected');\n        setError('Failed to connect to chat server');\n        navigate('/login');\n      }\n    };\n    _s(connectSocket, \"ompdN0WlZVZuZJm4UCLCAZwOUxU=\");\n    connectSocket();\n    return () => {\n      // Cleanup on component unmount\n      socketService.disconnect();\n    };\n  }, [navigate, userId, receiverId]);\n  const handleFileUpload = async event => {\n    var _event$target$files;\n    if (!((_event$target$files = event.target.files) !== null && _event$target$files !== void 0 && _event$target$files[0]) || !socketService.socket || !userId) return;\n    const file = event.target.files[0];\n    setIsUploading(true);\n    setError(null);\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('senderId', userId);\n      if (receiverId) {\n        formData.append('receiverId', receiverId);\n      }\n      socketService.socket.emit('fileUpload', formData, response => {\n        if (response.status !== 'success') {\n          throw new Error(response.message || 'File upload failed');\n        }\n      });\n      setUploadedFiles(prev => [...prev, file]);\n    } catch (error) {\n      console.error('File upload error:', error);\n      setError(error instanceof Error ? error.message : 'File upload failed');\n      setIsUploading(false);\n    }\n  };\n  const handleSendMessage = message => {\n    var _socketService$socket2;\n    if (!((_socketService$socket2 = socketService.socket) !== null && _socketService$socket2 !== void 0 && _socketService$socket2.connected) || !userId) {\n      setError('Not connected to chat server');\n      return;\n    }\n    setError(null);\n    const messageData = receiverId ? {\n      senderId: userId,\n      receiverId,\n      content: message\n    } : {\n      senderId: userId,\n      content: message\n    };\n    socketService.socket.emit('send_message', messageData, response => {\n      if (response.status !== 'success') {\n        setError(response.message || 'Failed to send message');\n      }\n    });\n  };\n  const renderConnectionStatus = () => {\n    switch (connectionStatus) {\n      case 'connecting':\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"connecting\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 45\n          }, this), \" Connecting...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 16\n        }, this);\n      case 'connected':\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"connected\",\n          children: \"Connected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 16\n        }, this);\n      case 'disconnected':\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"disconnected\",\n          children: \"Disconnected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 16\n        }, this);\n      default:\n        return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Chat Room - User: \", localStorage.getItem('username')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connection-status\",\n        children: renderConnectionStatus()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-content\",\n      children: userId && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          messages: messages,\n          currentUserId: userId,\n          receiverId: receiverId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(UploadedFiles, {\n          files: uploadedFiles,\n          isUploading: isUploading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-input-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"file-upload\",\n            className: \"file-upload-icon\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"file-upload\",\n              type: \"file\",\n              style: {\n                display: 'none'\n              },\n              onChange: handleFileUpload,\n              disabled: isUploading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            onSend: handleSendMessage,\n            disabled: connectionStatus !== 'connected' || isUploading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n};\n_s2(ChatWindow, \"OxR81wjUKfUflsJJfUMrDpHhXIA=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","MessageList","MessageInput","UploadedFiles","socketService","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatWindow","_s2","userId","receiverId","navigate","uploadedFiles","setUploadedFiles","messages","setMessages","connectionStatus","setConnectionStatus","isUploading","setIsUploading","error","setError","_s","$RefreshSig$","connectSocket","token","localStorage","getItem","isTyping","setIsTyping","socket","onTyping","data","senderId","on","_socketService$socket","off","initializeSocket","Error","onConnect","console","log","onDisconnect","onNewMessage","message","prev","onFileSent","fileMessage","onError","err","emit","response","status","disconnect","handleFileUpload","event","_event$target$files","target","files","file","formData","FormData","append","handleSendMessage","_socketService$socket2","connected","messageData","content","renderConnectionStatus","className","children","fileName","_jsxFileName","lineNumber","columnNumber","currentUserId","htmlFor","id","type","style","display","onChange","disabled","onSend","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Documents/projects/suxch/chat-client/src/components/Chat/ChatWindow.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport './ChatWindow.css';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport UploadedFiles from './UploadedFiles';\nimport { FaPaperclip, FaSpinner } from 'react-icons/fa';\nimport { socketService } from '../../services/socket';\n\ninterface ChatParams {\n  userId: string;\n  receiverId?: string;\n  [key: string]: string | undefined;\n}\n\ninterface Message {\n  id: string;\n  senderId: string;\n  receiverId: string | undefined;\n  content: string;\n  timestamp: Date;\n  status?: 'delivered' | 'read';\n  chatId: string;\n}\n\nconst ChatWindow: React.FC = () => {\n  const { userId, receiverId } = useParams<ChatParams>();\n  const navigate = useNavigate();\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [connectionStatus, setConnectionStatus] = useState<'connecting' | 'connected' | 'disconnected'>('connecting');\n  const [isUploading, setIsUploading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Initialize socket connection\n  useEffect(() => {\n    const connectSocket = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token || !userId) {\n          navigate('/login');\n          return;\n        }\n\n        const [isTyping, setIsTyping] = useState(false);\n\nuseEffect(() => {\n  if (!socketService.socket) return;\n\n  const onTyping = (data: {senderId: string}) => {\n    if (data.senderId === receiverId) {\n      setIsTyping(true);\n    }\n  };\n\n  socketService.socket.on('typing', onTyping);\n  return () => {\n    socketService.socket?.off('typing', onTyping);\n  };\n}, [receiverId]);\n\n\n        setConnectionStatus('connecting');\n        \n        await socketService.initializeSocket(token);\n        const socket = socketService.socket;\n        \n        if (!socket) {\n          throw new Error('Socket connection failed');\n        }\n\n        // Connection event handlers\n        const onConnect = () => {\n          setConnectionStatus('connected');\n          console.log('Socket connected');\n        };\n\n        const onDisconnect = () => {\n          setConnectionStatus('disconnected');\n          console.log('Socket disconnected');\n        };\n\n        const onNewMessage = (message: Message) => {\n          setMessages(prev => [...prev, message]);\n        };\n\n        const onFileSent = (fileMessage: Message) => {\n          setMessages(prev => [...prev, fileMessage]);\n          setIsUploading(false);\n        };\n\n        const onError = (err: Error) => {\n          console.error('Socket error:', err);\n          setError(err.message);\n        };\n\n        // Add event listeners\n        socket.on('connect', onConnect);\n        socket.on('disconnect', onDisconnect);\n        socket.on('new_message', onNewMessage);\n        socket.on('file-sent', onFileSent);\n        socket.on('error', onError);\n\n        // Load initial messages\n        if (receiverId) {\n          socket.emit('get_messages', { userId, receiverId }, (response: any) => {\n            if (response.status === 'success') {\n              setMessages(response.data);\n            }\n          });\n        }\n\n        return () => {\n          // Clean up event listeners\n          socket.off('connect', onConnect);\n          socket.off('new_message', onNewMessage);\n          socket.off('file-sent', onFileSent);\n          socket.off('error', onError);\n        };\n\n      } catch (error) {\n        console.error('Socket connection error:', error);\n        setConnectionStatus('disconnected');\n        setError('Failed to connect to chat server');\n        navigate('/login');\n      }\n    };\n\n    connectSocket();\n\n    return () => {\n      // Cleanup on component unmount\n      socketService.disconnect();\n    };\n  }, [navigate, userId, receiverId]);\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!event.target.files?.[0] || !socketService.socket || !userId) return;\n\n    const file = event.target.files[0];\n    setIsUploading(true);\n    setError(null);\n\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('senderId', userId);\n      if (receiverId) {\n        formData.append('receiverId', receiverId);\n      }\n\n      socketService.socket.emit('fileUpload', formData, (response: any) => {\n        if (response.status !== 'success') {\n          throw new Error(response.message || 'File upload failed');\n        }\n      });\n\n      setUploadedFiles(prev => [...prev, file]);\n    } catch (error) {\n      console.error('File upload error:', error);\n      setError(error instanceof Error ? error.message : 'File upload failed');\n      setIsUploading(false);\n    }\n  };\n\n  const handleSendMessage = (message: string) => {\n    if (!socketService.socket?.connected || !userId) {\n      setError('Not connected to chat server');\n      return;\n    }\n\n    setError(null);\n    \n    const messageData = receiverId \n      ? { senderId: userId, receiverId, content: message }\n      : { senderId: userId, content: message };\n\n    socketService.socket.emit('send_message', messageData, (response: any) => {\n      if (response.status !== 'success') {\n        setError(response.message || 'Failed to send message');\n      }\n    });\n  };\n\n  const renderConnectionStatus = () => {\n    switch (connectionStatus) {\n      case 'connecting':\n        return <span className=\"connecting\"><span className=\"spinner\"></span> Connecting...</span>;\n      case 'connected':\n        return <span className=\"connected\">Connected</span>;\n      case 'disconnected':\n        return <span className=\"disconnected\">Disconnected</span>;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-header\">\n        <h1>Chat Room - User: {localStorage.getItem('username')}</h1>\n        <div className=\"connection-status\">\n          {renderConnectionStatus()}\n        </div>\n      </div>\n\n      {error && <div className=\"error-message\">{error}</div>}\n\n      <div className=\"chat-content\">\n        {userId && (\n          <>\n            <MessageList \n              messages={messages} \n              currentUserId={userId} \n              receiverId={receiverId} \n            />\n            \n            <UploadedFiles \n              files={uploadedFiles} \n              isUploading={isUploading} \n            />\n            \n            <div className=\"chat-input-area\">\n              <label htmlFor=\"file-upload\" className=\"file-upload-icon\">\n               \n                <input\n                  id=\"file-upload\"\n                  type=\"file\"\n                  style={{ display: 'none' }}\n                  onChange={handleFileUpload}\n                  disabled={isUploading}\n                />\n              </label>\n              \n              <MessageInput \n                onSend={handleSendMessage} \n                disabled={connectionStatus !== 'connected' || isUploading}\n              />\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatWindow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}