{"ast":null,"code":"var _SocketService;\nimport { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n  }\n  static getInstance() {\n    if (!SocketService.instance) {\n      SocketService.instance = new SocketService();\n    }\n    return SocketService.instance;\n  }\n  initializeSocket(token) {\n    return new Promise((resolve, reject) => {\n      var _this$socket;\n      if ((_this$socket = this.socket) !== null && _this$socket !== void 0 && _this$socket.connected) return resolve(this.socket);\n      const cleanToken = token.replace('Bearer ', '');\n      const userId = localStorage.getItem('userId');\n      if (!userId) {\n        return reject(new Error('Missing userId in localStorage'));\n      }\n      if (!this.isTokenValid(cleanToken)) {\n        return reject(new Error('Invalid or expired token'));\n      }\n      this.socket = io('http://localhost:8080', {\n        path: '/socket.io',\n        auth: {\n          token: cleanToken\n        },\n        transports: ['websocket'],\n        reconnectionAttempts: 5,\n        reconnectionDelay: 2000,\n        query: {\n          userId,\n          token: cleanToken\n        },\n        withCredentials: true\n      });\n      this.socket.on('connect', () => {\n        console.log(\"WebSocket connected\");\n        resolve(this.socket);\n      });\n      this.socket.on('disconnect', () => {\n        console.log('Disconnected. Retrying...');\n        setTimeout(() => this.initializeSocket(token), 5000); // Retry after 5 seconds\n      });\n      this.socket.on('connect_error', err => {\n        console.error('Connection error:', err.message);\n        if (err.message === 'Unauthorized') {\n          localStorage.removeItem('token');\n          navigate('/login');\n        }\n        reject(err);\n      });\n    });\n  }\n  onConnectionStatusChange(callback) {\n    if (!this.socket) return;\n    this.socket.on('connect', () => callback('connected'));\n    this.socket.on('disconnect', () => callback('disconnected'));\n    this.socket.on('connect_error', () => callback('error'));\n    this.socket.on('reconnect_failed', () => callback('error'));\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      console.log(\"ðŸ”Œ WebSocket disconnected\");\n    }\n  }\n  isTokenValid(token) {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.exp * 1000 > Date.now(); // Check if token is expired\n    } catch {\n      return false;\n    }\n  }\n}\n_SocketService = SocketService;\nSocketService.instance = void 0;\nexport const socketService = SocketService.getInstance();\nconst connectSocket = async () => {\n  let token = localStorage.getItem('token');\n  if (!token || !socketService.isTokenValid(token)) {\n    token = await refreshToken();\n    if (!token) {\n      navigate('/login');\n      return;\n    }\n  }\n  try {\n    const socket = await socketService.initializeSocket(token);\n    socketService.onConnectionStatusChange(setConnectionStatus);\n  } catch (error) {\n    console.error('Socket connection error:', error);\n    setConnectionStatus('error');\n  }\n};","map":{"version":3,"names":["io","SocketService","constructor","socket","getInstance","instance","initializeSocket","token","Promise","resolve","reject","_this$socket","connected","cleanToken","replace","userId","localStorage","getItem","Error","isTokenValid","path","auth","transports","reconnectionAttempts","reconnectionDelay","query","withCredentials","on","console","log","setTimeout","err","error","message","removeItem","navigate","onConnectionStatusChange","callback","disconnect","payload","JSON","parse","atob","split","exp","Date","now","_SocketService","socketService","connectSocket","refreshToken","setConnectionStatus"],"sources":["C:/Users/DELL/Documents/projects/suxch/chat-client/src/services/socket.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\nimport { useParams, useNavigate } from 'react-router-dom';\n\nclass SocketService {\n  private static instance: SocketService;\n  socket: Socket | null = null;\n\n  public static getInstance(): SocketService {\n    if (!SocketService.instance) {\n      SocketService.instance = new SocketService();\n    }\n    return SocketService.instance;\n  }\n\n  initializeSocket(token: string): Promise<Socket> {\n    return new Promise((resolve, reject) => {\n      if (this.socket?.connected) return resolve(this.socket);\n\n      const cleanToken = token.replace('Bearer ', '');\n      const userId = localStorage.getItem('userId');\n\n      if (!userId) {\n        return reject(new Error('Missing userId in localStorage'));\n      }\n\n      if (!this.isTokenValid(cleanToken)) {\n        return reject(new Error('Invalid or expired token'));\n      }\n\n      this.socket = io('http://localhost:8080', {\n        path: '/socket.io',\n        auth: { token: cleanToken },\n        transports: ['websocket'],\n        reconnectionAttempts: 5,\n        reconnectionDelay: 2000,\n        query: { userId, token: cleanToken },\n        withCredentials: true,\n      });\n\n      this.socket.on('connect', () => {\n        console.log(\"WebSocket connected\");\n        resolve(this.socket!);\n      });\n\n      this.socket.on('disconnect', () => {\n        console.log('Disconnected. Retrying...');\n        setTimeout(() => this.initializeSocket(token), 5000); // Retry after 5 seconds\n      });\n\n      this.socket.on('connect_error', (err) => {\n        console.error('Connection error:', err.message);\n        if (err.message === 'Unauthorized') {\n          localStorage.removeItem('token');\n          navigate('/login');\n        }\n        reject(err);\n      });\n    });\n  }\n\n  onConnectionStatusChange(callback: (status: 'connected' | 'disconnected' | 'error') => void) {\n    if (!this.socket) return;\n\n    this.socket.on('connect', () => callback('connected'));\n    this.socket.on('disconnect', () => callback('disconnected'));\n    this.socket.on('connect_error', () => callback('error'));\n    this.socket.on('reconnect_failed', () => callback('error'));\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      console.log(\"ðŸ”Œ WebSocket disconnected\");\n    }\n  }\n\n  private isTokenValid(token: string): boolean {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.exp * 1000 > Date.now(); // Check if token is expired\n    } catch {\n      return false;\n    }\n  }\n}\n\nexport const socketService = SocketService.getInstance();\n\nconst connectSocket = async () => {\n  let token = localStorage.getItem('token');\n  if (!token || !socketService.isTokenValid(token)) {\n    token = await refreshToken();\n    if (!token) {\n      navigate('/login');\n      return;\n    }\n  }\n\n  try {\n    const socket = await socketService.initializeSocket(token);\n    socketService.onConnectionStatusChange(setConnectionStatus);\n  } catch (error) {\n    console.error('Socket connection error:', error);\n    setConnectionStatus('error');\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}