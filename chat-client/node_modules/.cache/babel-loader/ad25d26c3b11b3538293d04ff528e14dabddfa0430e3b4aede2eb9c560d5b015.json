{"ast":null,"code":"useEffect(() => {\n  const connectSocket = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token || !userId) {\n        navigate('/login');\n        return;\n      }\n      setConnectionStatus('connecting');\n      const socket = await socketService.initializeSocket(token);\n\n      // Listen for connection status changes\n      socketService.onConnectionStatusChange(setConnectionStatus);\n      const onNewMessage = message => {\n        setMessages(prev => [...prev, message]);\n      };\n      const onFileSent = fileMessage => {\n        setMessages(prev => [...prev, fileMessage]);\n        setIsUploading(false);\n      };\n      const onError = err => {\n        console.error('Socket error:', err);\n        setError(err.message);\n      };\n\n      // Add other event listeners\n      socket.on('new_message', onNewMessage);\n      socket.on('file-sent', onFileSent);\n      socket.on('error', onError);\n\n      // Load initial messages\n      if (receiverId) {\n        socket.emit('get_messages', {\n          userId,\n          receiverId\n        }, response => {\n          if (response.status === 'success') {\n            setMessages(response.data);\n          }\n        });\n      }\n      return () => {\n        socket.off('new_message', onNewMessage);\n        socket.off('file-sent', onFileSent);\n        socket.off('error', onError);\n      };\n    } catch (error) {\n      console.error('Socket connection error:', error);\n      setConnectionStatus('error');\n      setError('Failed to connect to chat server');\n      navigate('/login');\n    }\n  };\n  connectSocket();\n  return () => {\n    socketService.disconnect();\n  };\n}, [navigate, userId, receiverId]);","map":{"version":3,"names":["useEffect","connectSocket","token","localStorage","getItem","userId","navigate","setConnectionStatus","socket","socketService","initializeSocket","onConnectionStatusChange","onNewMessage","message","setMessages","prev","onFileSent","fileMessage","setIsUploading","onError","err","console","error","setError","on","receiverId","emit","response","status","data","off","disconnect"],"sources":["C:/Users/DELL/Documents/projects/suxch/chat-client/src/components/Chat/ChatWindow.tsx"],"sourcesContent":["useEffect(() => {\n  const connectSocket = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token || !userId) {\n        navigate('/login');\n        return;\n      }\n\n      setConnectionStatus('connecting');\n\n      const socket = await socketService.initializeSocket(token);\n\n      // Listen for connection status changes\n      socketService.onConnectionStatusChange(setConnectionStatus);\n\n      const onNewMessage = (message: Message) => {\n        setMessages(prev => [...prev, message]);\n      };\n\n      const onFileSent = (fileMessage: Message) => {\n        setMessages(prev => [...prev, fileMessage]);\n        setIsUploading(false);\n      };\n\n      const onError = (err: Error) => {\n        console.error('Socket error:', err);\n        setError(err.message);\n      };\n\n      // Add other event listeners\n      socket.on('new_message', onNewMessage);\n      socket.on('file-sent', onFileSent);\n      socket.on('error', onError);\n\n      // Load initial messages\n      if (receiverId) {\n        socket.emit('get_messages', { userId, receiverId }, (response: any) => {\n          if (response.status === 'success') {\n            setMessages(response.data);\n          }\n        });\n      }\n\n      return () => {\n        socket.off('new_message', onNewMessage);\n        socket.off('file-sent', onFileSent);\n        socket.off('error', onError);\n      };\n\n    } catch (error) {\n      console.error('Socket connection error:', error);\n      setConnectionStatus('error');\n      setError('Failed to connect to chat server');\n      navigate('/login');\n    }\n  };\n\n  connectSocket();\n\n  return () => {\n    socketService.disconnect();\n  };\n}, [navigate, userId, receiverId]);\n"],"mappings":"AAAAA,SAAS,CAAC,MAAM;EACd,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAI,CAACF,KAAK,IAAI,CAACG,MAAM,EAAE;QACrBC,QAAQ,CAAC,QAAQ,CAAC;QAClB;MACF;MAEAC,mBAAmB,CAAC,YAAY,CAAC;MAEjC,MAAMC,MAAM,GAAG,MAAMC,aAAa,CAACC,gBAAgB,CAACR,KAAK,CAAC;;MAE1D;MACAO,aAAa,CAACE,wBAAwB,CAACJ,mBAAmB,CAAC;MAE3D,MAAMK,YAAY,GAAIC,OAAgB,IAAK;QACzCC,WAAW,CAACC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEF,OAAO,CAAC,CAAC;MACzC,CAAC;MAED,MAAMG,UAAU,GAAIC,WAAoB,IAAK;QAC3CH,WAAW,CAACC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEE,WAAW,CAAC,CAAC;QAC3CC,cAAc,CAAC,KAAK,CAAC;MACvB,CAAC;MAED,MAAMC,OAAO,GAAIC,GAAU,IAAK;QAC9BC,OAAO,CAACC,KAAK,CAAC,eAAe,EAAEF,GAAG,CAAC;QACnCG,QAAQ,CAACH,GAAG,CAACP,OAAO,CAAC;MACvB,CAAC;;MAED;MACAL,MAAM,CAACgB,EAAE,CAAC,aAAa,EAAEZ,YAAY,CAAC;MACtCJ,MAAM,CAACgB,EAAE,CAAC,WAAW,EAAER,UAAU,CAAC;MAClCR,MAAM,CAACgB,EAAE,CAAC,OAAO,EAAEL,OAAO,CAAC;;MAE3B;MACA,IAAIM,UAAU,EAAE;QACdjB,MAAM,CAACkB,IAAI,CAAC,cAAc,EAAE;UAAErB,MAAM;UAAEoB;QAAW,CAAC,EAAGE,QAAa,IAAK;UACrE,IAAIA,QAAQ,CAACC,MAAM,KAAK,SAAS,EAAE;YACjCd,WAAW,CAACa,QAAQ,CAACE,IAAI,CAAC;UAC5B;QACF,CAAC,CAAC;MACJ;MAEA,OAAO,MAAM;QACXrB,MAAM,CAACsB,GAAG,CAAC,aAAa,EAAElB,YAAY,CAAC;QACvCJ,MAAM,CAACsB,GAAG,CAAC,WAAW,EAAEd,UAAU,CAAC;QACnCR,MAAM,CAACsB,GAAG,CAAC,OAAO,EAAEX,OAAO,CAAC;MAC9B,CAAC;IAEH,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDf,mBAAmB,CAAC,OAAO,CAAC;MAC5BgB,QAAQ,CAAC,kCAAkC,CAAC;MAC5CjB,QAAQ,CAAC,QAAQ,CAAC;IACpB;EACF,CAAC;EAEDL,aAAa,CAAC,CAAC;EAEf,OAAO,MAAM;IACXQ,aAAa,CAACsB,UAAU,CAAC,CAAC;EAC5B,CAAC;AACH,CAAC,EAAE,CAACzB,QAAQ,EAAED,MAAM,EAAEoB,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}