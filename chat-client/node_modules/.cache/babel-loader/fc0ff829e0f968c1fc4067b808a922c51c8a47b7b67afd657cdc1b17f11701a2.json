{"ast":null,"code":"const initSocket = useCallback(() => {\n  const token = localStorage.getItem('token');\n  const storedUserId = localStorage.getItem('userId');\n  if (!token || !storedUserId || storedUserId !== userId) {\n    navigate('/login');\n    return null;\n  }\n\n  // Clean up existing socket if it exists\n  if (window.socket) {\n    window.socket.disconnect();\n    window.socket = null;\n  }\n  const socketOptions = {\n    path: '/socket.io',\n    // Changed from '/chat/socket.io'\n    auth: {\n      token\n    },\n    // Removed 'Bearer ' prefix\n    query: {\n      userId\n    },\n    transports: ['websocket'],\n    reconnectionAttempts: 5,\n    reconnectionDelay: 1000,\n    forceNew: true,\n    // Ensure fresh connection\n    autoConnect: true\n  };\n  const newSocket = io(SOCKET_SERVER_URL, socketOptions);\n\n  // Connection handlers\n  newSocket.on('connect', () => {\n    console.log('Connected with ID:', newSocket.id);\n    setClientId(newSocket.id);\n    setConnectionStatus('connected');\n    if (receiverId) {\n      newSocket.emit('join_conversation', {\n        userId,\n        receiverId\n      });\n    }\n  });\n  newSocket.on('disconnect', reason => {\n    console.log('Disconnected:', reason);\n    setConnectionStatus('disconnected');\n    if (reason === 'io server disconnect') {\n      // The server forcibly disconnected the socket\n      setTimeout(() => initSocket(), 1000);\n    }\n  });\n\n  // Add error listener before connect_error\n  newSocket.on('error', err => {\n    console.error('Socket error:', err);\n  });\n  newSocket.on('connect_error', err => {\n    console.error('Connection error:', err.message);\n    setConnectionStatus('disconnected');\n    if (err.message.includes('auth')) {\n      localStorage.clear();\n      navigate('/login');\n    }\n    setTimeout(() => initSocket(), 2000);\n  });\n\n  // Message handlers\n  const messageHandler = message => {\n    setMessages(prev => [...prev, message]);\n  };\n  newSocket.on('new_message', messageHandler);\n  newSocket.on('file-sent', messageHandler);\n  window.socket = newSocket;\n  setSocket(newSocket);\n  return newSocket;\n}, [userId, receiverId, navigate]);","map":{"version":3,"names":["initSocket","useCallback","token","localStorage","getItem","storedUserId","userId","navigate","window","socket","disconnect","socketOptions","path","auth","query","transports","reconnectionAttempts","reconnectionDelay","forceNew","autoConnect","newSocket","io","SOCKET_SERVER_URL","on","console","log","id","setClientId","setConnectionStatus","receiverId","emit","reason","setTimeout","err","error","message","includes","clear","messageHandler","setMessages","prev","setSocket"],"sources":["C:/Users/DELL/Documents/projects/suxch/chat-client/src/components/Chat/ChatWindow.tsx"],"sourcesContent":["const initSocket = useCallback(() => {\n  const token = localStorage.getItem('token');\n  const storedUserId = localStorage.getItem('userId');\n  \n  if (!token || !storedUserId || storedUserId !== userId) {\n    navigate('/login');\n    return null;\n  }\n\n  // Clean up existing socket if it exists\n  if (window.socket) {\n    window.socket.disconnect();\n    window.socket = null;\n  }\n\n  const socketOptions: Partial<ManagerOptions & SocketOptions> = {\n    path: '/socket.io', // Changed from '/chat/socket.io'\n    auth: { token }, // Removed 'Bearer ' prefix\n    query: { userId },\n    transports: ['websocket'],\n    reconnectionAttempts: 5,\n    reconnectionDelay: 1000,\n    forceNew: true, // Ensure fresh connection\n    autoConnect: true,\n  };\n\n  const newSocket = io(SOCKET_SERVER_URL, socketOptions);\n\n  // Connection handlers\n  newSocket.on('connect', () => {\n    console.log('Connected with ID:', newSocket.id);\n    setClientId(newSocket.id);\n    setConnectionStatus('connected');\n    \n    if (receiverId) {\n      newSocket.emit('join_conversation', { userId, receiverId });\n    }\n  });\n\n  newSocket.on('disconnect', (reason) => {\n    console.log('Disconnected:', reason);\n    setConnectionStatus('disconnected');\n    if (reason === 'io server disconnect') {\n      // The server forcibly disconnected the socket\n      setTimeout(() => initSocket(), 1000);\n    }\n  });\n\n  // Add error listener before connect_error\n  newSocket.on('error', (err) => {\n    console.error('Socket error:', err);\n  });\n\n  newSocket.on('connect_error', (err) => {\n    console.error('Connection error:', err.message);\n    setConnectionStatus('disconnected');\n    if (err.message.includes('auth')) {\n      localStorage.clear();\n      navigate('/login');\n    }\n    setTimeout(() => initSocket(), 2000);\n  });\n\n  // Message handlers\n  const messageHandler = (message: any) => {\n    setMessages(prev => [...prev, message]);\n  };\n  newSocket.on('new_message', messageHandler);\n  newSocket.on('file-sent', messageHandler);\n\n  window.socket = newSocket;\n  setSocket(newSocket);\n\n  return newSocket;\n}, [userId, receiverId, navigate]);"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,WAAW,CAAC,MAAM;EACnC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMC,YAAY,GAAGF,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAEnD,IAAI,CAACF,KAAK,IAAI,CAACG,YAAY,IAAIA,YAAY,KAAKC,MAAM,EAAE;IACtDC,QAAQ,CAAC,QAAQ,CAAC;IAClB,OAAO,IAAI;EACb;;EAEA;EACA,IAAIC,MAAM,CAACC,MAAM,EAAE;IACjBD,MAAM,CAACC,MAAM,CAACC,UAAU,CAAC,CAAC;IAC1BF,MAAM,CAACC,MAAM,GAAG,IAAI;EACtB;EAEA,MAAME,aAAsD,GAAG;IAC7DC,IAAI,EAAE,YAAY;IAAE;IACpBC,IAAI,EAAE;MAAEX;IAAM,CAAC;IAAE;IACjBY,KAAK,EAAE;MAAER;IAAO,CAAC;IACjBS,UAAU,EAAE,CAAC,WAAW,CAAC;IACzBC,oBAAoB,EAAE,CAAC;IACvBC,iBAAiB,EAAE,IAAI;IACvBC,QAAQ,EAAE,IAAI;IAAE;IAChBC,WAAW,EAAE;EACf,CAAC;EAED,MAAMC,SAAS,GAAGC,EAAE,CAACC,iBAAiB,EAAEX,aAAa,CAAC;;EAEtD;EACAS,SAAS,CAACG,EAAE,CAAC,SAAS,EAAE,MAAM;IAC5BC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEL,SAAS,CAACM,EAAE,CAAC;IAC/CC,WAAW,CAACP,SAAS,CAACM,EAAE,CAAC;IACzBE,mBAAmB,CAAC,WAAW,CAAC;IAEhC,IAAIC,UAAU,EAAE;MACdT,SAAS,CAACU,IAAI,CAAC,mBAAmB,EAAE;QAAExB,MAAM;QAAEuB;MAAW,CAAC,CAAC;IAC7D;EACF,CAAC,CAAC;EAEFT,SAAS,CAACG,EAAE,CAAC,YAAY,EAAGQ,MAAM,IAAK;IACrCP,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEM,MAAM,CAAC;IACpCH,mBAAmB,CAAC,cAAc,CAAC;IACnC,IAAIG,MAAM,KAAK,sBAAsB,EAAE;MACrC;MACAC,UAAU,CAAC,MAAMhC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC;IACtC;EACF,CAAC,CAAC;;EAEF;EACAoB,SAAS,CAACG,EAAE,CAAC,OAAO,EAAGU,GAAG,IAAK;IAC7BT,OAAO,CAACU,KAAK,CAAC,eAAe,EAAED,GAAG,CAAC;EACrC,CAAC,CAAC;EAEFb,SAAS,CAACG,EAAE,CAAC,eAAe,EAAGU,GAAG,IAAK;IACrCT,OAAO,CAACU,KAAK,CAAC,mBAAmB,EAAED,GAAG,CAACE,OAAO,CAAC;IAC/CP,mBAAmB,CAAC,cAAc,CAAC;IACnC,IAAIK,GAAG,CAACE,OAAO,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;MAChCjC,YAAY,CAACkC,KAAK,CAAC,CAAC;MACpB9B,QAAQ,CAAC,QAAQ,CAAC;IACpB;IACAyB,UAAU,CAAC,MAAMhC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC;EACtC,CAAC,CAAC;;EAEF;EACA,MAAMsC,cAAc,GAAIH,OAAY,IAAK;IACvCI,WAAW,CAACC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEL,OAAO,CAAC,CAAC;EACzC,CAAC;EACDf,SAAS,CAACG,EAAE,CAAC,aAAa,EAAEe,cAAc,CAAC;EAC3ClB,SAAS,CAACG,EAAE,CAAC,WAAW,EAAEe,cAAc,CAAC;EAEzC9B,MAAM,CAACC,MAAM,GAAGW,SAAS;EACzBqB,SAAS,CAACrB,SAAS,CAAC;EAEpB,OAAOA,SAAS;AAClB,CAAC,EAAE,CAACd,MAAM,EAAEuB,UAAU,EAAEtB,QAAQ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}