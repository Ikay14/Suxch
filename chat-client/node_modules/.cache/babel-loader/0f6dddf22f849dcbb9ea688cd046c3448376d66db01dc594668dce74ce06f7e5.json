{"ast":null,"code":"var _SocketService;\nimport { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n  }\n  static getInstance() {\n    if (!SocketService.instance) {\n      SocketService.instance = new SocketService();\n    }\n    return SocketService.instance;\n  }\n  initializeSocket(token) {\n    return new Promise((resolve, reject) => {\n      var _this$socket;\n      if ((_this$socket = this.socket) !== null && _this$socket !== void 0 && _this$socket.connected) return resolve(this.socket);\n      if (this.socket) {\n        this.socket.disconnect();\n        this.socket = null;\n      }\n      const cleanToken = token.replace('Bearer ', '');\n      const token = localStorage.getItem('token');\n      this.socket = io('http://localhost:8080', {\n        path: '/socket.io',\n        auth: {\n          token: cleanToken\n        },\n        transports: ['websocket'],\n        reconnectionAttempts: 3,\n        reconnectionDelay: 1000,\n        query: {\n          token: cleanToken\n        },\n        extraHeaders: {\n          'Authorization': `Bearer ${cleanToken}`\n        },\n        withCredentials: true\n      });\n      this.socket.on('connect', () => {\n        console.log('Connected to base path');\n        resolve(this.socket);\n      });\n      this.socket.on('connect', () => {\n        console.log(\"WebSocket connected\");\n        this.socket.emit('message', 'Hello!');\n      });\n      this.socket.on('disconnect', () => {\n        console.log(\"WebSocket disconnected\");\n      });\n      this.socket.on('connect_error', err => {\n        console.error('❌ Connection error:', err.message);\n        reject(err);\n      });\n    });\n  }\n}\n_SocketService = SocketService;\nSocketService.instance = void 0;\nexport const socketService = SocketService.getInstance();","map":{"version":3,"names":["io","SocketService","constructor","socket","getInstance","instance","initializeSocket","token","Promise","resolve","reject","_this$socket","connected","disconnect","cleanToken","replace","localStorage","getItem","path","auth","transports","reconnectionAttempts","reconnectionDelay","query","extraHeaders","withCredentials","on","console","log","emit","err","error","message","_SocketService","socketService"],"sources":["C:/Users/DELL/Documents/projects/suxch/chat-client/src/services/socket.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\n\nclass SocketService {\n    private static instance: SocketService;\n    socket: Socket | null = null;\n\n    public static getInstance(): SocketService {\n        if (!SocketService.instance) {\n            SocketService.instance = new SocketService();\n        }\n        return SocketService.instance;\n    }\n    initializeSocket(token: string): Promise<Socket> {\n        return new Promise((resolve, reject) => {\n          if (this.socket?.connected) return resolve(this.socket);\n      \n          if (this.socket) {\n            this.socket.disconnect();\n            this.socket = null;\n          }\n      \n          const cleanToken = token.replace('Bearer ', '');\n          const token = localStorage.getItem('token');\n      \n          this.socket = io('http://localhost:8080', { \n            path: '/socket.io',\n            auth: { token: cleanToken },\n            transports: ['websocket'],\n            reconnectionAttempts: 3,\n            reconnectionDelay: 1000,\n            query: { token: cleanToken },\n            extraHeaders: {\n              'Authorization': `Bearer ${cleanToken}`\n            },\n            withCredentials: true\n          });\n      \n          this.socket.on('connect', () => {\n            console.log('Connected to base path');\n            resolve(this.socket!);\n          });\n      \n\n          this.socket.on('connect', () => {\n            console.log(\"WebSocket connected\");\n            this.socket.emit('message', 'Hello!');\n          });\n          \n          this.socket.on('disconnect', () => {\n            console.log(\"WebSocket disconnected\");\n          });\n          \n          this.socket.on('connect_error', (err) => {\n            console.error('❌ Connection error:', err.message);\n            reject(err);\n          });\n        });\n        \n      }\n      \n\n    \n}\n\nexport const socketService = SocketService.getInstance();"],"mappings":";AAAA,SAASA,EAAE,QAAgB,kBAAkB;AAE7C,MAAMC,aAAa,CAAC;EAAAC,YAAA;IAAA,KAEhBC,MAAM,GAAkB,IAAI;EAAA;EAE5B,OAAcC,WAAWA,CAAA,EAAkB;IACvC,IAAI,CAACH,aAAa,CAACI,QAAQ,EAAE;MACzBJ,aAAa,CAACI,QAAQ,GAAG,IAAIJ,aAAa,CAAC,CAAC;IAChD;IACA,OAAOA,aAAa,CAACI,QAAQ;EACjC;EACAC,gBAAgBA,CAACC,KAAa,EAAmB;IAC7C,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MAAA,IAAAC,YAAA;MACtC,KAAAA,YAAA,GAAI,IAAI,CAACR,MAAM,cAAAQ,YAAA,eAAXA,YAAA,CAAaC,SAAS,EAAE,OAAOH,OAAO,CAAC,IAAI,CAACN,MAAM,CAAC;MAEvD,IAAI,IAAI,CAACA,MAAM,EAAE;QACf,IAAI,CAACA,MAAM,CAACU,UAAU,CAAC,CAAC;QACxB,IAAI,CAACV,MAAM,GAAG,IAAI;MACpB;MAEA,MAAMW,UAAU,GAAGP,KAAK,CAACQ,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;MAC/C,MAAMR,KAAK,GAAGS,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAE3C,IAAI,CAACd,MAAM,GAAGH,EAAE,CAAC,uBAAuB,EAAE;QACxCkB,IAAI,EAAE,YAAY;QAClBC,IAAI,EAAE;UAAEZ,KAAK,EAAEO;QAAW,CAAC;QAC3BM,UAAU,EAAE,CAAC,WAAW,CAAC;QACzBC,oBAAoB,EAAE,CAAC;QACvBC,iBAAiB,EAAE,IAAI;QACvBC,KAAK,EAAE;UAAEhB,KAAK,EAAEO;QAAW,CAAC;QAC5BU,YAAY,EAAE;UACZ,eAAe,EAAE,UAAUV,UAAU;QACvC,CAAC;QACDW,eAAe,EAAE;MACnB,CAAC,CAAC;MAEF,IAAI,CAACtB,MAAM,CAACuB,EAAE,CAAC,SAAS,EAAE,MAAM;QAC9BC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;QACrCnB,OAAO,CAAC,IAAI,CAACN,MAAO,CAAC;MACvB,CAAC,CAAC;MAGF,IAAI,CAACA,MAAM,CAACuB,EAAE,CAAC,SAAS,EAAE,MAAM;QAC9BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;QAClC,IAAI,CAACzB,MAAM,CAAC0B,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC;MACvC,CAAC,CAAC;MAEF,IAAI,CAAC1B,MAAM,CAACuB,EAAE,CAAC,YAAY,EAAE,MAAM;QACjCC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACvC,CAAC,CAAC;MAEF,IAAI,CAACzB,MAAM,CAACuB,EAAE,CAAC,eAAe,EAAGI,GAAG,IAAK;QACvCH,OAAO,CAACI,KAAK,CAAC,qBAAqB,EAAED,GAAG,CAACE,OAAO,CAAC;QACjDtB,MAAM,CAACoB,GAAG,CAAC;MACb,CAAC,CAAC;IACJ,CAAC,CAAC;EAEJ;AAIN;AAACG,cAAA,GA5DKhC,aAAa;AAAbA,aAAa,CACAI,QAAQ;AA6D3B,OAAO,MAAM6B,aAAa,GAAGjC,aAAa,CAACG,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}